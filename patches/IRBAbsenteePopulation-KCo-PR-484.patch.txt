From 56f94cff610b7157e9d4cda08f30ee9e20557698 Mon Sep 17 00:00:00 2001
From: Travis Schneberger <leo.herbie@gmail.com>
Date: Mon, 1 Jun 2015 11:32:44 -0400
Subject: [PATCH] Making the absentee list populate correctly

---
 .../impl/meeting/MeetingServiceImplBase.java       | 94 ++++++++++++----------
 1 file changed, 50 insertions(+), 44 deletions(-)

diff --git a/coeus-impl/src/main/java/org/kuali/coeus/common/committee/impl/meeting/MeetingServiceImplBase.java b/coeus-impl/src/main/java/org/kuali/coeus/common/committee/impl/meeting/MeetingServiceImplBase.java
index d2f5606..56bb835 100644
--- a/coeus-impl/src/main/java/org/kuali/coeus/common/committee/impl/meeting/MeetingServiceImplBase.java
+++ b/coeus-impl/src/main/java/org/kuali/coeus/common/committee/impl/meeting/MeetingServiceImplBase.java
@@ -84,10 +84,7 @@ protected Date getAgendaGenerationDate(Long scheduleId) {
      * This method is to get the generated agenda for this committee schedule.
      */
     protected List<ScheduleAgendaBase> getAgenda(Long scheduleId) {
-        Map<String, Long> fieldValues = new HashMap<String, Long>();
-        fieldValues.put("scheduleIdFk", scheduleId);
-
-        return (List<ScheduleAgendaBase>) businessObjectService.findMatchingOrderBy(getScheduleAgendaBOClassHook(), fieldValues, "createTimestamp", true);
+        return (List<ScheduleAgendaBase>) businessObjectService.findMatchingOrderBy(getScheduleAgendaBOClassHook(), Collections.singletonMap("scheduleIdFk", scheduleId), "createTimestamp", true);
     }
 
     protected abstract Class<? extends ScheduleAgendaBase> getScheduleAgendaBOClassHook();
@@ -99,10 +96,7 @@ protected Date getAgendaGenerationDate(Long scheduleId) {
      * This method is get the meeting minute documents of the selected committee schedule
      */
     protected List<CommScheduleMinuteDocBase> getMinuteDoc(Long scheduleId) {
-        Map<String, Long> fieldValues = new HashMap<String, Long>();
-        fieldValues.put("scheduleIdFk", scheduleId);
-
-        return (List<CommScheduleMinuteDocBase>) businessObjectService.findMatchingOrderBy(getCommScheduleMinuteDocBOClassHook(), fieldValues, "createTimestamp", true);
+        return (List<CommScheduleMinuteDocBase>) businessObjectService.findMatchingOrderBy(getCommScheduleMinuteDocBOClassHook(), Collections.singletonMap("scheduleIdFk", scheduleId), "createTimestamp", true);
     }
     
     protected abstract Class<? extends CommScheduleMinuteDocBase> getCommScheduleMinuteDocBOClassHook();
@@ -114,16 +108,16 @@ protected Date getAgendaGenerationDate(Long scheduleId) {
      * to this committee schedule. ie, protocols that have been submitted to this committee schedule.
      */
     protected List<ProtocolCorrespondence> getCorrespondences(CS committeeSchedule) {
-        Map<String, Long> fieldValues = new HashMap<String, Long>();
-        List<Long> protocolIds = new ArrayList<Long>();
-        List<ProtocolCorrespondence> correspondences = new ArrayList<ProtocolCorrespondence>();
+        Map<String, Long> fieldValues = new HashMap<>();
+        List<Long> protocolIds = new ArrayList<>();
+        List<ProtocolCorrespondence> correspondences = new ArrayList<>();
         // TODO : check if want to use criteria/dao to get the list or use this loop
         for (ProtocolSubmissionBase submission : committeeSchedule.getLatestProtocolSubmissions()) {
             if (!protocolIds.contains(submission.getProtocolId())) {
                 protocolIds.add(submission.getProtocolId());
                 fieldValues.put("protocolId", submission.getProtocolId());
 
-                correspondences.addAll((List<? extends ProtocolCorrespondence>) businessObjectService.findMatching(getProtocolCorrespondenceBOClassHook(), fieldValues));
+                correspondences.addAll(businessObjectService.findMatching(getProtocolCorrespondenceBOClassHook(), fieldValues));
             }
         }
         return correspondences;
@@ -135,9 +129,9 @@ protected Date getAgendaGenerationDate(Long scheduleId) {
     
     @Override
     public void saveMeetingDetails(CS committeeSchedule, List<? extends PersistableBusinessObject> deletedBos) {
-        committeeSchedule.setStartTime(addHrMinToDate(committeeSchedule.getStartTime(), committeeSchedule.getViewStartTime()));
-        committeeSchedule.setEndTime(addHrMinToDate(committeeSchedule.getEndTime(), committeeSchedule.getViewEndTime()));
-        committeeSchedule.setTime(addHrMinToDate(committeeSchedule.getTime(), committeeSchedule.getViewTime()));
+        committeeSchedule.setStartTime(addHrMinToDate(committeeSchedule.getViewStartTime()));
+        committeeSchedule.setEndTime(addHrMinToDate(committeeSchedule.getViewEndTime()));
+        committeeSchedule.setTime(addHrMinToDate(committeeSchedule.getViewTime()));
 
         if (!deletedBos.isEmpty()) {
             businessObjectService.delete(deletedBos);
@@ -153,7 +147,7 @@ public void saveMeetingDetails(CS committeeSchedule, List<? extends PersistableB
     @Override
     public String getStandardReviewComment(String protocolContingencyCode) {
         String description = null;
-        Map<String, String> queryMap = new HashMap<String, String>();
+        Map<String, String> queryMap = new HashMap<>();
         queryMap.put("protocolContingencyCode", protocolContingencyCode);
         ProtocolContingencyBase protocolContingency = businessObjectService.findByPrimaryKey(getProtocolContingencyBOClassHook(), queryMap);
         if (protocolContingency != null) {
@@ -167,7 +161,7 @@ public String getStandardReviewComment(String protocolContingencyCode) {
     /*
      * utility methods by adding minutes to date
      */
-    protected Timestamp addHrMinToDate(Timestamp time, Time12HrFmt viewTime) {
+    protected Timestamp addHrMinToDate(Time12HrFmt viewTime) {
         java.util.Date dt = new java.util.Date(0); // this is actually 12-31-1969 19:00.  its GMT time
         DateFormat dateFormat = new SimpleDateFormat("MM/dd/yyyy h:mm a");
         try {
@@ -209,8 +203,7 @@ public void addOtherAction(CommScheduleActItemBase newOtherAction, CS committeeS
     }
     
     protected Long getNextCommScheduleActItemId(Class boClass) {
-        Long nextCommScheduleActItemId = sequenceAccessorService.getNextAvailableSequenceNumber("SEQ_MEETING_ID", boClass);
-        return nextCommScheduleActItemId;
+        return sequenceAccessorService.getNextAvailableSequenceNumber("SEQ_MEETING_ID", boClass);
     }
 
     /*
@@ -283,10 +276,7 @@ protected boolean isAlternateForMember(CS commonCommitteeSchedule, CommitteeSche
     }
 
     protected boolean isActiveMembership(CommitteeMembershipBase committeeMembership, Date scheduledDate) {
-        if (isActiveForScheduledDate(scheduledDate, committeeMembership.getTermStartDate(), committeeMembership.getTermEndDate())) {
-            return hasActiveMembershipRoleForScheduledDate(committeeMembership.getMembershipRoles(), scheduledDate);
-        }
-        return false;
+        return isActiveForScheduledDate(scheduledDate, committeeMembership.getTermStartDate(), committeeMembership.getTermEndDate()) && hasActiveMembershipRoleForScheduledDate(committeeMembership.getMembershipRoles(), scheduledDate);
     }
 
     private boolean hasActiveMembershipRoleForScheduledDate(List<CommitteeMembershipRole> committeeMembershipRoles, Date scheduledDate) {
@@ -373,7 +363,23 @@ protected boolean isActiveMember(CommitteeScheduleAttendanceBase committeeSchedu
         }
         return isActiveMember;
     }
-
+    
+    protected boolean isActiveMemberAbsent(CommitteeScheduleAttendanceBase committeeScheduleAttendance,
+    		CommitteeMembershipBase committeeMembership, Date scheduleDate) {
+        boolean isActiveMember = false;   
+            if ((committeeScheduleAttendance.getNonEmployeeFlag() && committeeMembership.getRolodexId() != null && committeeScheduleAttendance
+                    .getPersonId().equals(committeeMembership.getRolodexId().toString()))
+                    || (!committeeScheduleAttendance.getNonEmployeeFlag() && committeeScheduleAttendance.getPersonId()!=null && committeeScheduleAttendance.getPersonId().equals(
+                            committeeMembership.getPersonId()))) {
+                if (!committeeMembership.getTermStartDate().after(scheduleDate)
+                        && !committeeMembership.getTermEndDate().before(scheduleDate)) {
+                    isActiveMember = isActiveMembership(committeeMembership, scheduleDate);
+                }
+            }
+        
+        return isActiveMember;
+    }
+    
 
     @Override
     public void presentOther(MeetingHelperBase meetingHelper, int itemNumber) {
@@ -403,9 +409,6 @@ public void addOtherPresent(MeetingHelperBase meetingHelper) {
      * This method is called when 'addOtherPresent'. It is to check if the selected person/rolodex is in member absent. if the
      * selected person/rolodex is in memberabsentbean list, then removed it from the membersentbean list; so this person will not be
      * displayed in member absent panel.
-     * 
-     * @param meetingHelper
-     * @param otherPresentBean
      */
     protected void memberHandling(MeetingHelperBase meetingHelper, OtherPresentBeanBase otherPresentBean) {
         MemberAbsentBean matchedMemberAbsentBean = null;
@@ -555,8 +558,8 @@ protected String getAlternateForName(CS commonCommitteeSchedule, String alternat
         for (CommitteeMembershipBase committeeMembership : commonCommitteeSchedule.getParentCommittee().getCommitteeMemberships()) {
             if ((StringUtils.isNotBlank(committeeMembership.getPersonId()) && committeeMembership.getPersonId()
                     .equals(alternateFor))
-                    || (StringUtils.isBlank(committeeMembership.getPersonId()) && committeeMembership.getRolodexId().equals(
-                            alternateFor))) {
+                    || (StringUtils.isBlank(committeeMembership.getPersonId()) && committeeMembership.getRolodexId().toString().equals(
+                    alternateFor))) {
                 personName = committeeMembership.getPersonName();
                 break;
             }
@@ -714,8 +717,8 @@ protected void populateAttendanceToForm(MeetingHelperBase meetingHelper, List<Co
      */
     protected void populatePresentBean(MeetingHelperBase meetingHelper, List<CommitteeMembershipBase> committeeMemberships,
             CS commSchedule) {
-        meetingHelper.setOtherPresentBeans(new ArrayList<OtherPresentBeanBase>());
-        meetingHelper.setMemberPresentBeans(new ArrayList<MemberPresentBean>());
+        meetingHelper.setOtherPresentBeans(new ArrayList<>());
+        meetingHelper.setMemberPresentBeans(new ArrayList<>());
         for (CommitteeScheduleAttendanceBase committeeScheduleAttendance : commSchedule.getCommitteeScheduleAttendances()) {
             getRoleName(committeeScheduleAttendance, committeeMemberships, commSchedule.getScheduledDate());
             if (committeeScheduleAttendance.getGuestFlag()) {
@@ -742,8 +745,8 @@ protected void populatePresentBean(MeetingHelperBase meetingHelper, List<Committ
      */
     protected void populateMemberAbsentBean(MeetingHelperBase meetingHelper, List<CommitteeMembershipBase> committeeMemberships,
             CS commSchedule) {
-        meetingHelper.setMemberAbsentBeans(new ArrayList<MemberAbsentBean>());
-        for (CommitteeMembershipBase committeeMembership : committeeMemberships) {
+        meetingHelper.setMemberAbsentBeans(new ArrayList<>());
+        committeeMemberships.forEach(committeeMembership -> {
             if (!isInMemberPresent(meetingHelper.getMemberPresentBeans(), committeeMembership)
                     && !isInOtherPresent(meetingHelper.getOtherPresentBeans(), committeeMembership)) {
                 MemberAbsentBean memberAbsentBean = new MemberAbsentBean();
@@ -756,14 +759,17 @@ protected void populateMemberAbsentBean(MeetingHelperBase meetingHelper, List<Co
                 else {
                     attendance.setPersonId(committeeMembership.getPersonId());
                 }
-                attendance.setPersonName(committeeMembership.getPersonName());
-                attendance.setAlternateFlag(false);
-                attendance.setNonEmployeeFlag(StringUtils.isBlank(committeeMembership.getPersonId()));
-                memberAbsentBean.setAttendance(attendance);
-                meetingHelper.getMemberAbsentBeans().add(memberAbsentBean);
-            }
-        }
 
+                if(isActiveMemberAbsent(attendance, committeeMembership, commSchedule
+                        .getScheduledDate())){
+                    attendance.setPersonName(committeeMembership.getPersonName());
+                    attendance.setAlternateFlag(false);
+                    attendance.setNonEmployeeFlag(StringUtils.isBlank(committeeMembership.getPersonId()));
+                    memberAbsentBean.setAttendance(attendance);
+                    meetingHelper.getMemberAbsentBeans().add(memberAbsentBean);
+                }
+            }
+        });
     }
 
     protected abstract CommitteeScheduleAttendanceBase getNewCommitteeScheduleAttendanceInstanceHook();
@@ -775,7 +781,7 @@ protected void populateMemberAbsentBean(MeetingHelperBase meetingHelper, List<Co
      */
     protected void initAttendance(List<MemberAbsentBean> memberAbsentBeans, CS commSchedule) {
         List<CommitteeMembershipBase> committeeMemberships = commSchedule.getParentCommittee().getCommitteeMemberships();
-        for (CommitteeMembershipBase committeeMembership : committeeMemberships) {
+        committeeMemberships.forEach(committeeMembership -> {
             if (isActiveMembership(committeeMembership, commSchedule.getScheduledDate())) {
 
                 CommitteeScheduleAttendanceBase committeeScheduleAttendance = getNewCommitteeScheduleAttendanceInstanceHook();
@@ -799,7 +805,7 @@ protected void initAttendance(List<MemberAbsentBean> memberAbsentBeans, CS commS
                 memberAbsentBean.setAttendance(committeeScheduleAttendance);
                 memberAbsentBeans.add(memberAbsentBean);
             }
-        }
+        });
     }
 
     /*
@@ -847,7 +853,7 @@ protected boolean isInOtherPresent(List<OtherPresentBeanBase> otherPresentBeans,
     private void refreshAndSaveSchedule(CS committeeSchedule) {
         // Since a refresh will wipe out all the newly added (unsaved) minutes from the schedule, we will
         // collect all newly added minutes in a separate collection and add them back after the refresh
-        List<CSM> preRefreshMinutes = new ArrayList<CSM>();
+        List<CSM> preRefreshMinutes = new ArrayList<>();
         // reset entryNumber in each entry because user may have changed ordering
         int nextEntry = 0;
         for (CSM minute:committeeSchedule.getCommitteeScheduleMinutes()) {
@@ -856,7 +862,7 @@ private void refreshAndSaveSchedule(CS committeeSchedule) {
         }
 
         committeeSchedule.refreshReferenceObject(COMMITTEE_SCHEDULE_MINUTES_REF_ID);
-        List<CSM> newlyAddedMinutes = new ArrayList<CSM>();
+        List<CSM> newlyAddedMinutes = new ArrayList<>();
         for(CSM formMinute:preRefreshMinutes) {
             if(null == formMinute.getCommScheduleMinutesId()) {
                 newlyAddedMinutes.add(formMinute);
