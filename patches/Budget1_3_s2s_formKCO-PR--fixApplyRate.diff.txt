diff --git a/coeus-s2sgen-impl/src/main/java/org/kuali/coeus/s2sgen/impl/budget/S2SBudgetCalculatorServiceImpl.java b/coeus-s2sgen-impl/src/main/java/org/kuali/coeus/s2sgen/impl/budget/S2SBudgetCalculatorServiceImpl.java
index 91da3c3..e6347bd 100644
--- a/coeus-s2sgen-impl/src/main/java/org/kuali/coeus/s2sgen/impl/budget/S2SBudgetCalculatorServiceImpl.java
+++ b/coeus-s2sgen-impl/src/main/java/org/kuali/coeus/s2sgen/impl/budget/S2SBudgetCalculatorServiceImpl.java
@@ -1073,10 +1073,11 @@ public IndirectCostDto getIndirectCosts(BudgetContract budget, BudgetPeriodContr
                         keyBuilder.append("-");
                         keyBuilder.append(appliedRate);
                         String key = keyBuilder.toString();
+                        boolean applyRateFlag = getApplyRateFlagForRateBase(rateBase.getBudgetLineItemId(), lineItem.getBudgetLineItemCalculatedAmounts());
                         if (costDetailsMap.get(key) == null) {
                             indirectCostDetails = new IndirectCostDetailsDto();
-                            indirectCostDetails.setBase(rateBase.getBaseCost() == null ? ScaleTwoDecimal.ZERO : rateBase
-                                    .getBaseCost());
+                            indirectCostDetails.setBase(rateBase.getBaseCost() == null ? ScaleTwoDecimal.ZERO : applyRateFlag ? rateBase
+                                    .getBaseCost() : ScaleTwoDecimal.ZERO);
                             indirectCostDetails.setBaseCostSharing(rateBase.getBaseCostSharing() == null ? ScaleTwoDecimal.ZERO
                                     : rateBase.getBaseCostSharing());
                             if (canBudgetLineItemCostSharingInclude(budget, lineItem)) {
@@ -1091,7 +1092,8 @@ public IndirectCostDto getIndirectCosts(BudgetContract budget, BudgetPeriodContr
                         else {
                             indirectCostDetails = costDetailsMap.get(key);
                             baseCost = indirectCostDetails.getBase().add(
-                                    rateBase.getBaseCost() == null ? ScaleTwoDecimal.ZERO : rateBase.getBaseCost());
+                                    rateBase.getBaseCost() == null ? ScaleTwoDecimal.ZERO : applyRateFlag ? rateBase
+                                            .getBaseCost() : ScaleTwoDecimal.ZERO);
                             baseCostSharing = indirectCostDetails.getBaseCostSharing().add(
                                     rateBase.getBaseCostSharing() == null ? ScaleTwoDecimal.ZERO : rateBase.getBaseCostSharing());
                             calculatedCost = indirectCostDetails.getFunds().add(
@@ -1129,6 +1131,15 @@ public IndirectCostDto getIndirectCosts(BudgetContract budget, BudgetPeriodContr
         return indirectCostInfo;
     }
 
+    protected boolean getApplyRateFlagForRateBase(Long budgetLineItemId, List<? extends BudgetLineItemCalculatedAmountContract> budgetLineItemCalculatedAmounts) {
+        for (BudgetLineItemCalculatedAmountContract lineItemCalculatedAmount : budgetLineItemCalculatedAmounts) {
+            if (lineItemCalculatedAmount.getBudgetLineItemId() == budgetLineItemId) {
+                return lineItemCalculatedAmount.getApplyRateFlag();
+            }
+        }
+        return true;
+    }
+
     /**
      * 
      * This method computes Other Dirtect Costs for the given {@link org.kuali.coeus.common.budget.api.period.BudgetPeriodContract} and Sponsor
