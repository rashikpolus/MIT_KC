From 89271da4bc2bdc7ced2643f05b5d46200dbebc66 Mon Sep 17 00:00:00 2001
From: Travis Schneberger <leo.herbie@gmail.com>
Date: Wed, 15 Apr 2015 15:42:18 -0400
Subject: [PATCH] RESKC-275: make award date change transactions show up with a
 transaction id in the various history views and transaction print dropdown
 menus

---
 .../sql/mysql/kc/bootstrap/V602_012__RESKC-275.sql | 57 ++++++++++++++++++++
 .../lookup/AwardTransactionLookupServiceImpl.java  |  3 +-
 .../kra/timeandmoney/AwardAmountInfoHistory.java   | 62 ++++++----------------
 .../history/TransactionDetailType.java             |  2 +-
 .../impl/TimeAndMoneyHistoryServiceImpl.java       | 26 +++++----
 .../web/struts/action/TimeAndMoneyAction.java      | 43 ++++++++-------
 .../main/webapp/WEB-INF/jsp/award/AwardHistory.jsp |  6 ++-
 .../tags/timeandmoney/timeAndMoneyHistory.tag      | 17 +++---
 .../tags/timeandmoney/transactionDetails.tag       | 13 +----
 9 files changed, 124 insertions(+), 105 deletions(-)
 create mode 100644 coeus-db/coeus-db-sql/src/main/resources/co/kuali/coeus/data/migration/sql/mysql/kc/bootstrap/V602_012__RESKC-275.sql

diff --git a/coeus-db/coeus-db-sql/src/main/resources/co/kuali/coeus/data/migration/sql/mysql/kc/bootstrap/V602_012__RESKC-275.sql b/coeus-db/coeus-db-sql/src/main/resources/co/kuali/coeus/data/migration/sql/mysql/kc/bootstrap/V602_012__RESKC-275.sql
new file mode 100644
index 0000000..03fba45
--- /dev/null
+++ b/coeus-db/coeus-db-sql/src/main/resources/co/kuali/coeus/data/migration/sql/mysql/kc/bootstrap/V602_012__RESKC-275.sql
@@ -0,0 +1,57 @@
+--
+-- Kuali Coeus, a comprehensive research administration system for higher education.
+--
+-- Copyright 2005-2015 Kuali, Inc.
+--
+-- This program is free software: you can redistribute it and/or modify
+-- it under the terms of the GNU Affero General Public License as
+-- published by the Free Software Foundation, either version 3 of the
+-- License, or (at your option) any later version.
+--
+-- This program is distributed in the hope that it will be useful,
+-- but WITHOUT ANY WARRANTY; without even the implied warranty of
+-- MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+-- GNU Affero General Public License for more details.
+--
+-- You should have received a copy of the GNU Affero General Public License
+-- along with this program.  If not, see <http://www.gnu.org/licenses/>.
+--
+
+DELIMITER /
+
+DROP PROCEDURE IF EXISTS p
+/
+CREATE PROCEDURE p()
+BEGIN
+  DECLARE DONE INT DEFAULT FALSE;
+  DECLARE TRANS_DETAIL_ID decimal(10,0);
+  DECLARE TNM_DOC_NUMBER varchar(40);
+  DECLARE NEXT_TRANS_ID bigint(19);
+
+  DECLARE TRANS_DETAIL_CUR CURSOR FOR SELECT TRANSACTION_DETAIL_ID, TNM_DOCUMENT_NUMBER FROM TRANSACTION_DETAILS WHERE TRANSACTION_ID = '-1';
+  DECLARE CONTINUE HANDLER FOR NOT FOUND SET DONE = TRUE;
+
+  OPEN TRANS_DETAIL_CUR;
+
+  read_loop: LOOP
+    FETCH TRANS_DETAIL_CUR INTO TRANS_DETAIL_ID, TNM_DOC_NUMBER;
+    IF DONE THEN
+      LEAVE read_loop;
+    END IF;
+
+    INSERT INTO SEQ_TRANSACTION_ID VALUES (null);
+    SELECT MAX(ID) + 1 INTO NEXT_TRANS_ID FROM SEQ_TRANSACTION_ID;
+
+    UPDATE TRANSACTION_DETAILS SET TRANSACTION_DETAIL_TYPE = 'DATE', TRANSACTION_ID = NEXT_TRANS_ID WHERE TRANSACTION_DETAIL_ID = TRANS_DETAIL_ID;
+    UPDATE AWARD_AMOUNT_INFO SET TRANSACTION_ID = NEXT_TRANS_ID WHERE TNM_DOCUMENT_NUMBER = TNM_DOC_NUMBER AND TRANSACTION_ID IS NULL;
+  END LOOP;
+
+  CLOSE TRANS_DETAIL_CUR;
+END
+/
+CALL p()
+/
+DROP PROCEDURE IF EXISTS p
+/
+
+DELIMITER ;
\ No newline at end of file
diff --git a/coeus-impl/src/main/java/org/kuali/kra/award/lookup/AwardTransactionLookupServiceImpl.java b/coeus-impl/src/main/java/org/kuali/kra/award/lookup/AwardTransactionLookupServiceImpl.java
index ab6797c..726fe6e 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/award/lookup/AwardTransactionLookupServiceImpl.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/award/lookup/AwardTransactionLookupServiceImpl.java
@@ -65,8 +65,9 @@
                     }
                 }
             }
-            Award currentAward = getAwardVersion(awardNumber, sequenceNumber);
             transactionIds.removeAll(excludedTransactionIds);
+
+            Award currentAward = getAwardVersion(awardNumber, sequenceNumber);
             Map<Integer, String> retval = new TreeMap<Integer, String>(new Comparator<Integer>(){
                 public int compare(Integer o1, Integer o2) {
                     //sort in descending order instead of ascending
diff --git a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/AwardAmountInfoHistory.java b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/AwardAmountInfoHistory.java
index c4a3416..bcfa2fa 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/AwardAmountInfoHistory.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/AwardAmountInfoHistory.java
@@ -28,90 +28,63 @@
 
 public class AwardAmountInfoHistory implements Serializable {
 
-
     private static final long serialVersionUID = -3741486339602358742L;
     
     private AwardAmountInfo awardAmountInfo;
     private String transactionType;
     private String dateFieldChanged;
+    private TransactionDetail dateDetail;
     private TransactionDetail primaryDetail;
     private List<TransactionDetail> intermediateDetails;
     
     public AwardAmountInfoHistory() {
         intermediateDetails = new ArrayList<TransactionDetail>();
     }
-    
-    /**
-     * Gets the awardAmountInfo attribute. 
-     * @return Returns the awardAmountInfo.
-     */
+
     public AwardAmountInfo getAwardAmountInfo() {
         return awardAmountInfo;
     }
-    /**
-     * Sets the awardAmountInfo attribute value.
-     * @param awardAmountInfo The awardAmountInfo to set.
-     */
+
     public void setAwardAmountInfo(AwardAmountInfo awardAmountInfo) {
         this.awardAmountInfo = awardAmountInfo;
     }
-    /**
-     * Gets the transactionType attribute. 
-     * @return Returns the transactionType.
-     */
+
     public String getTransactionType() {
         return transactionType;
     }
-    /**
-     * Sets the transactionType attribute value.
-     * @param transactionType The transactionType to set.
-     */
+
     public void setTransactionType(String transactionType) {
         this.transactionType = transactionType;
     }
-    /**
-     * Gets the dateFieldChanged attribute. 
-     * @return Returns the dateFieldChanged.
-     */
+
     public String getDateFieldChanged() {
         return dateFieldChanged;
     }
-    /**
-     * Sets the dateFieldChanged attribute value.
-     * @param dateFieldChanged The dateFieldChanged to set.
-     */
+
     public void setDateFieldChanged(String dateFieldChanged) {
         this.dateFieldChanged = dateFieldChanged;
     }
 
-    /**
-     * Gets the primaryDetail attribute. 
-     * @return Returns the primaryDetail.
-     */
+    public TransactionDetail getDateDetail() {
+        return dateDetail;
+    }
+
+    public void setDateDetail(TransactionDetail dateDetail) {
+        this.dateDetail = dateDetail;
+    }
+
     public TransactionDetail getPrimaryDetail() {
         return primaryDetail;
     }
 
-    /**
-     * Sets the primaryDetail attribute value.
-     * @param primaryDetail The primaryDetail to set.
-     */
     public void setPrimaryDetail(TransactionDetail primaryDetail) {
         this.primaryDetail = primaryDetail;
     }
 
-    /**
-     * Gets the intermediateDetails attribute. 
-     * @return Returns the intermediateDetails.
-     */
     public List<TransactionDetail> getIntermediateDetails() {
         return intermediateDetails;
     }
 
-    /**
-     * Sets the intermediateDetails attribute value.
-     * @param intermediateDetails The intermediateDetails to set.
-     */
     public void setIntermediateDetails(List<TransactionDetail> intermediateDetails) {
         this.intermediateDetails = intermediateDetails;
     }
@@ -120,9 +93,4 @@ public String getTransactionDetailTableSize() {
         int returnValue = intermediateDetails.size() + 1;
         return Integer.toString(returnValue);
     }
-    
-    
-    
-    
-    
 }
diff --git a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/history/TransactionDetailType.java b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/history/TransactionDetailType.java
index 04ba4e5..74447ac 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/history/TransactionDetailType.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/history/TransactionDetailType.java
@@ -22,5 +22,5 @@
  * This class holds all types of transaction details.
  */
 public enum TransactionDetailType {
-    PRIMARY, INTERMEDIATE
+    PRIMARY, INTERMEDIATE, DATE
 }
diff --git a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/service/impl/TimeAndMoneyHistoryServiceImpl.java b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/service/impl/TimeAndMoneyHistoryServiceImpl.java
index 092a855..5fd0289 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/service/impl/TimeAndMoneyHistoryServiceImpl.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/service/impl/TimeAndMoneyHistoryServiceImpl.java
@@ -47,7 +47,6 @@
 
 public class TimeAndMoneyHistoryServiceImpl implements TimeAndMoneyHistoryService {
 
-	private static final String DATE_CHANGE_TRANSACTION_ID = "-1";
 	private static final String TIME_AND_MONEY_DOCUMENT_NUMBER = "timeAndMoneyDocumentNumber";
 	private static final String ROOT_AWARD_NUMBER = "rootAwardNumber";
 	private static final String SOURCE_AWARD_NUMBER = "sourceAwardNumber";
@@ -172,25 +171,24 @@ public boolean evaluate(TransactionDetail detail) {
 		return ((List<TransactionDetail>) businessObjectService.findMatchingOrderBy(TransactionDetail.class, values, TRANSACTION_DETAIL_ID, true));
 	}
 
-	
+
 	protected List<AwardAmountInfoHistory> captureDateInfos(TimeAndMoneyDocument doc, List<AwardAmountInfo> validInfos) {
 		List<AwardAmountInfoHistory> dateInfoHistoryList = new ArrayList<>();
 		Map<String, Object> fieldValues = new HashMap<>();
 		for (AwardAmountInfo awardAmountInfo : validInfos) {
 			if (!(awardAmountInfo.getTimeAndMoneyDocumentNumber() == null)) {
 				if (StringUtils.equalsIgnoreCase(doc.getDocumentNumber(), awardAmountInfo.getTimeAndMoneyDocumentNumber())) {
-					if (awardAmountInfo.getTransactionId() == null) {
-						fieldValues.put(SOURCE_AWARD_NUMBER, awardAmountInfo.getAwardNumber());
-						fieldValues.put(TRANSACTION_ID, DATE_CHANGE_TRANSACTION_ID);
-						fieldValues.put(TIME_AND_MONEY_DOCUMENT_NUMBER, awardAmountInfo.getTimeAndMoneyDocumentNumber());
-						List<TransactionDetail> dateTransactionDetails = ((List<TransactionDetail>) businessObjectService.findMatchingOrderBy(TransactionDetail.class, fieldValues,
-								SOURCE_AWARD_NUMBER, true));
-						if (dateTransactionDetails.size() > 0) {
-							AwardAmountInfoHistory awardAmountInfoHistory = new AwardAmountInfoHistory();
-							awardAmountInfoHistory.setAwardAmountInfo(awardAmountInfo);
-							awardAmountInfoHistory.setTransactionType(TransactionType.DATE.toString());
-							dateInfoHistoryList.add(awardAmountInfoHistory);
-						}
+					fieldValues.put(SOURCE_AWARD_NUMBER, awardAmountInfo.getAwardNumber());
+					fieldValues.put(TRANSACTION_DETAIL_TYPE, TransactionDetailType.DATE.toString());
+					fieldValues.put(TIME_AND_MONEY_DOCUMENT_NUMBER, awardAmountInfo.getTimeAndMoneyDocumentNumber());
+					fieldValues.put(TRANSACTION_ID, awardAmountInfo.getTransactionId());
+					Collection<TransactionDetail> dateTransactionDetails = businessObjectService.findMatching(TransactionDetail.class, fieldValues);
+					if (!dateTransactionDetails.isEmpty()) {
+						AwardAmountInfoHistory awardAmountInfoHistory = new AwardAmountInfoHistory();
+						awardAmountInfoHistory.setAwardAmountInfo(awardAmountInfo);
+						awardAmountInfoHistory.setTransactionType(TransactionType.DATE.toString());
+						awardAmountInfoHistory.setDateDetail(dateTransactionDetails.iterator().next());
+						dateInfoHistoryList.add(awardAmountInfoHistory);
 					}
 				}
 			}
diff --git a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/web/struts/action/TimeAndMoneyAction.java b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/web/struts/action/TimeAndMoneyAction.java
index 7dedcdd..ee2908b 100644
--- a/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/web/struts/action/TimeAndMoneyAction.java
+++ b/coeus-impl/src/main/java/org/kuali/kra/timeandmoney/web/struts/action/TimeAndMoneyAction.java
@@ -40,6 +40,7 @@
 import org.kuali.kra.timeandmoney.TimeAndMoneyForm;
 import org.kuali.kra.timeandmoney.document.TimeAndMoneyDocument;
 import org.kuali.kra.timeandmoney.history.TransactionDetail;
+import org.kuali.kra.timeandmoney.history.TransactionDetailType;
 import org.kuali.kra.timeandmoney.service.ActivePendingTransactionsService;
 import org.kuali.kra.timeandmoney.service.TimeAndMoneyActionSummaryService;
 import org.kuali.kra.timeandmoney.service.TimeAndMoneyHistoryService;
@@ -81,6 +82,7 @@
     public static final String DIRECT_INDIRECT_ENABLED = "1";
     public static final String AWARD_AMOUNT_INFOS = "awardAmountInfos";
     public static final String SINGLE_NODE_MONEY_TRANSACTION_COMMENT = "Single Node Money Transaction";
+    public static final String TRANSACTION_SEQUENCE = "SEQ_TRANSACTION_ID";
 
     private AwardVersionService awardVersionService;
     private TransactionRuleImpl transactionRuleImpl;
@@ -298,7 +300,6 @@ private boolean createAndValidateDisabledViewTransaction(TimeAndMoneyForm timeAn
     private void captureDateChangeTransactions(ActionForm form) throws WorkflowException {
         TimeAndMoneyForm timeAndMoneyForm = (TimeAndMoneyForm) form;
         TimeAndMoneyDocument timeAndMoneyDocument = timeAndMoneyForm.getTimeAndMoneyDocument();
-        List<AwardAmountInfo> awardAmountInfoObjects = new ArrayList<>();
         //save rules have not been applied yet so there needs to be a null check on transaction type code before testing the value.
         boolean isNoCostExtension;
         if (timeAndMoneyDocument.getAwardAmountTransactions().get(0).getTransactionTypeCode() == null) {
@@ -339,8 +340,6 @@ private void captureDateChangeTransactions(ActionForm form) throws WorkflowExcep
             }
         }
         //we want to apply save rules to doc before we save any captured changes.
-        //The save on awardAmountInfoObjects should always be after the save on entire award object otherwise awardAmountInfoObjects changes get overwritten.
-        getBusinessObjectService().save(awardAmountInfoObjects);
         getBusinessObjectService().save(timeAndMoneyDocument.getAwardAmountTransactions());
         //save all transaction details from No Cost extension date changes.
         getBusinessObjectService().save(dateChangeTransactionDetailItems);
@@ -370,8 +369,10 @@ protected boolean inspectAndCaptureCurrentFundEffectiveDateChanges(TimeAndMoneyF
                         aai.setCurrentFundEffectiveDate(currentEffectiveDate);
                         awardHierarchyNode.getValue().setCurrentFundEffectiveDate(currentEffectiveDate);
                         award.getAwardAmountInfos().add(aai);
-                        addTransactionDetailsForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
-                                timeAndMoneyDocument.getDocumentNumber(), OBLIGATED_START_COMMENT, dateChangeTransactionDetailItems);
+                TransactionDetail transactionDetail = createTransDetailForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
+                        timeAndMoneyDocument.getDocumentNumber(), OBLIGATED_START_COMMENT);
+                aai.setTransactionId(transactionDetail.getTransactionId());
+                dateChangeTransactionDetailItems.add(transactionDetail);
             } else {
                     AwardAmountInfo tempAai = getNewAwardAmountInfoForDateChangeTransaction(aai, award, timeAndMoneyDocument.getDocumentNumber());
                     needToSave = true;
@@ -417,8 +418,10 @@ protected boolean inspectAndCaptureObligationExpirationDateChanges(TimeAndMoneyF
                         aai.setObligationExpirationDate(currentObligationExpirationDate);
                         awardHierarchyNode.getValue().setObligationExpirationDate(currentObligationExpirationDate);
                         award.getAwardAmountInfos().add(aai);
-                        addTransactionDetailsForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
-                                timeAndMoneyDocument.getDocumentNumber(), OBLIGATED_END_COMMENT, dateChangeTransactionDetailItems);
+                TransactionDetail transactionDetail = createTransDetailForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
+                        timeAndMoneyDocument.getDocumentNumber(), OBLIGATED_END_COMMENT);
+                aai.setTransactionId(transactionDetail.getTransactionId());
+                dateChangeTransactionDetailItems.add(transactionDetail);
             }else {
                     aai = getNewAwardAmountInfoForDateChangeTransaction(aai, award, timeAndMoneyDocument.getDocumentNumber());
                     aai.setObligationExpirationDate(currentObligationExpirationDate);
@@ -460,10 +463,12 @@ protected boolean inspectAndCaptureFinalExpirationDateChanges(TimeAndMoneyForm t
                   timeAndMoneyForm.getAwardHierarchyNodeItems().get(index).getFinalExpirationDate().after(aai.getFinalExpirationDate())) {
                     aai = getNewAwardAmountInfoForDateChangeTransaction(aai, award, timeAndMoneyDocument.getDocumentNumber());
                       aai.setFinalExpirationDate(timeAndMoneyForm.getAwardHierarchyNodeItems().get(index).getFinalExpirationDate());
-                      awardHierarchyNode.getValue().setFinalExpirationDate(timeAndMoneyForm.getAwardHierarchyNodeItems().get(index).getFinalExpirationDate());
-                      award.getAwardAmountInfos().add(aai);
-                      addTransactionDetailsForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
-                              timeAndMoneyDocument.getDocumentNumber(), PROJECT_END_COMMENT, dateChangeTransactionDetailItems);
+              awardHierarchyNode.getValue().setFinalExpirationDate(timeAndMoneyForm.getAwardHierarchyNodeItems().get(index).getFinalExpirationDate());
+              award.getAwardAmountInfos().add(aai);
+              TransactionDetail transactionDetail = createTransDetailForDateChanges(aai.getAwardNumber(), aai.getAwardNumber(), aai.getSequenceNumber(), timeAndMoneyDocument.getAwardNumber(),
+                      timeAndMoneyDocument.getDocumentNumber(), PROJECT_END_COMMENT);
+              aai.setTransactionId(transactionDetail.getTransactionId());
+              dateChangeTransactionDetailItems.add(transactionDetail);
           }else {
               aai = getNewAwardAmountInfoForDateChangeTransaction(aai, award, timeAndMoneyDocument.getDocumentNumber());
                   aai.setFinalExpirationDate(timeAndMoneyForm.getAwardHierarchyNodeItems().get(index).getFinalExpirationDate());
@@ -506,21 +511,19 @@ private boolean mustSetFandADistributions(List<AwardDirectFandADistribution> awa
          }
          return needToSave;
      }
-    
-    /*
-     * This method creates a transactionDetail object and adds it to the list for persistence later.
-     */
-    protected void addTransactionDetailsForDateChanges(String sourceAwardNumber, String destinationAwardNumber, Integer sequenceNumber, String currentAwardNumber, String documentNumber,
-                                                       String commentsString, List<TransactionDetail> transactionDetailItems){
+
+    protected TransactionDetail createTransDetailForDateChanges(String sourceAwardNumber, String destinationAwardNumber, Integer sequenceNumber, String currentAwardNumber, String documentNumber,
+                                                       String commentsString){
         TransactionDetail transactionDetail = new TransactionDetail();
         transactionDetail.setSourceAwardNumber(sourceAwardNumber);
         transactionDetail.setSequenceNumber(sequenceNumber);
         transactionDetail.setDestinationAwardNumber(destinationAwardNumber);
         transactionDetail.setAwardNumber(currentAwardNumber);
-        transactionDetail.setTransactionId(-1L);
+        transactionDetail.setTransactionDetailType(TransactionDetailType.DATE.toString());
+        transactionDetail.setTransactionId(getSequenceAccessorService().getNextAvailableSequenceNumber(TRANSACTION_SEQUENCE));
         transactionDetail.setTimeAndMoneyDocumentNumber(documentNumber);
         transactionDetail.setComments(commentsString);
-        transactionDetailItems.add(transactionDetail);
+        return transactionDetail;
     }
     
     /*
@@ -674,7 +677,7 @@ public ActionForward refreshView(ActionMapping mapping, ActionForm form, HttpSer
         if(StringUtils.equalsIgnoreCase(timeAndMoneyForm.getCurrentOrPendingView(), TimeAndMoneyForm.PENDING)){
             
             Map<String, AwardAmountTransaction> awardAmountTransactionItems = new HashMap<>();
-            List<Award> awardItems = new ArrayList<Award>();
+            List<Award> awardItems = new ArrayList<>();
             List<TransactionDetail> transactionDetailItems = new ArrayList<>();
             
             updateDocumentFromSession(doc);
diff --git a/coeus-webapp/src/main/webapp/WEB-INF/jsp/award/AwardHistory.jsp b/coeus-webapp/src/main/webapp/WEB-INF/jsp/award/AwardHistory.jsp
index 9e8cbc9..e56f9a1 100644
--- a/coeus-webapp/src/main/webapp/WEB-INF/jsp/award/AwardHistory.jsp
+++ b/coeus-webapp/src/main/webapp/WEB-INF/jsp/award/AwardHistory.jsp
@@ -170,10 +170,12 @@
 						        			<c:out value="${awardAmountInfoHistory.primaryDetail.transactionId}" />
 							        	</c:when>
 							        	<c:when test="${awardAmountInfoHistory.transactionType == 'DATE'}">
-							        		<c:out value="No Cost Extension" />
+											<c:out value="Transaction ID: " />
+											<c:out value="${awardAmountInfoHistory.dateDetail.transactionId}" />
 							        	</c:when>
 							        	<c:when test="${awardAmountInfoHistory.transactionType == 'SINGLENODEMONEYTRANSACTION'}">
-							        		<c:out value="Single Node Money Transaction" />
+											<c:out value="Transaction ID: " />
+											<c:out value="${awardAmountInfoHistory.primaryDetail.transactionId}" />
 							        	</c:when>
 						    	    	<c:otherwise>
 						        			<c:out value="Initial Transaction" />
diff --git a/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/timeAndMoneyHistory.tag b/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/timeAndMoneyHistory.tag
index d2bbccc..0afbe57 100644
--- a/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/timeAndMoneyHistory.tag
+++ b/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/timeAndMoneyHistory.tag
@@ -169,7 +169,7 @@
 					</td>    
 				</tr>
 			</c:if>
-			<c:forEach var="timeAndMoneyDocumentHistory" items="${awardVersionHistory.timeAndMoneyDocumentHistoryList}" varStatus="status"> 
+			<c:forEach var="timeAndMoneyDocumentHistory" items="${awardVersionHistory.timeAndMoneyDocumentHistoryList}" varStatus="status">
 				<tr>
 				<td  align="left" valign="left" class="infoline" rowspan="1">
 		          	<div align="center">
@@ -189,28 +189,27 @@
                 	</div>
 				</td>
 				</tr>
-				<c:forEach var="awardAmountInfoHistory" items="${timeAndMoneyDocumentHistory.validAwardAmountInfoHistoryList}" varStatus="status"> 
+				<c:forEach var="awardAmountInfoHistory" items="${timeAndMoneyDocumentHistory.validAwardAmountInfoHistoryList}" varStatus="status">
 					<tr>
 						<td align="center" valign="middle" rowspan="2" >
 							<div align="center" >
 						        <c:choose>
 						        	<c:when test="${awardAmountInfoHistory.transactionType == 'MONEY'}">
-						      			<c:out value="Transaction ID: " />
-						        		<c:out value="${awardAmountInfoHistory.primaryDetail.transactionId}" />
+						      			Transaction ID: ${awardAmountInfoHistory.primaryDetail.transactionId}
 						        	</c:when>
 						        	<c:when test="${awardAmountInfoHistory.transactionType == 'DATE'}">
-						        		<c:out value="No Cost Extension" />
+										Transaction ID: ${awardAmountInfoHistory.dateDetail.transactionId}
 						        	</c:when>
 						        	<c:when test="${awardAmountInfoHistory.transactionType == 'SINGLENODEMONEYTRANSACTION'}">
-						        		<c:out value="Single Node Money Transaction" />
+										Transaction ID: ${awardAmountInfoHistory.primaryDetail.transactionId}
 						        	</c:when>
 						        	<c:otherwise>
-						        		<c:out value="Initial Transaction" />
+						        		Initial Transaction
 						        	</c:otherwise>
 						        </c:choose>
 						     </div>	
 						</td>
-						
+
 				<c:choose>
 	        		<c:when test="${KualiForm.directIndirectViewEnabled == '1'}">
 						<th>
@@ -387,7 +386,7 @@
 			        			</div>
 			        			</td>		
 		        			</tr>
-		        		</c:if>	
+		        		</c:if>
 				</c:forEach>
 			</c:forEach>
         </c:forEach> 
diff --git a/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/transactionDetails.tag b/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/transactionDetails.tag
index 5eb2047..1a6cec7 100644
--- a/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/transactionDetails.tag
+++ b/coeus-webapp/src/main/webapp/WEB-INF/tags/timeandmoney/transactionDetails.tag
@@ -20,17 +20,8 @@
 <%@ attribute name="awardAmountInfoHistory" description="awardAmountInfoHistory" required="true" type="org.kuali.kra.timeandmoney.AwardAmountInfoHistory"%>
 
 <c:set var="transactionDetailAttributes" value="${DataDictionary.TransactionDetail.attributes}" />
-
- <c:choose>
-       	<c:when test="${awardAmountInfoHistory.transactionType == 'SINGLENODEMONEYTRANSACTION'}">
-     		<c:set var="tabTitleAttribute" value="Single Node Transaction ID:" />
-     		<c:set var="idValue" value="${awardAmountInfoHistory.primaryDetail.transactionDetailId}" />
-       	</c:when>
-       	<c:otherwise>
-       		<c:set var="tabTitleAttribute" value="Transaction Details ID:" />
-     		<c:set var="idValue" value="${awardAmountInfoHistory.primaryDetail.transactionDetailId}" />
-       	</c:otherwise>
- </c:choose>
+<c:set var="tabTitleAttribute" value="Transaction ID:" />
+<c:set var="idValue" value="${awardAmountInfoHistory.primaryDetail.transactionDetailId}" />
 
 <kul:innerTab parentTab="History" defaultOpen="false" tabTitle="Transaction Details/${tabTitleAttribute} ${idValue}" tabErrorKey="" >
 	<table border="0" cellpadding="0" cellspacing="0" summary="">
