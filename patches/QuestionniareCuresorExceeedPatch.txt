diff --git a/coeus-impl/src/main/java/org/kuali/coeus/common/questionnaire/impl/QuestionnaireDaoOjb.java b/coeus-impl/src/main/java/org/kuali/coeus/common/questionnaire/impl/QuestionnaireDaoOjb.java
index 74950de..0f26d59 100644
--- a/coeus-impl/src/main/java/org/kuali/coeus/common/questionnaire/impl/QuestionnaireDaoOjb.java
+++ b/coeus-impl/src/main/java/org/kuali/coeus/common/questionnaire/impl/QuestionnaireDaoOjb.java
@@ -21,7 +21,7 @@
 
 import java.math.BigDecimal;
 import java.util.Iterator;
-import org.apache.commons.lang3.ArrayUtils;
+
 import org.apache.ojb.broker.query.Criteria;
 import org.apache.ojb.broker.query.QueryFactory;
 import org.apache.ojb.broker.query.ReportQueryByCriteria;
@@ -29,24 +29,21 @@
 import org.kuali.coeus.common.questionnaire.framework.core.QuestionnaireConstants;
 import org.kuali.rice.core.framework.persistence.ojb.dao.PlatformAwareDaoBaseOjb;
 
-/**
- * @author Kuali Rice Team (rice.collab@kuali.org)
- */
 public class QuestionnaireDaoOjb extends PlatformAwareDaoBaseOjb implements QuestionnaireDao {
 
     @Override
     public Integer getCurrentQuestionnaireSequenceNumber(String questionnaireSeqId) {
-        Criteria criteria = new Criteria();
+        final Criteria criteria = new Criteria();
         criteria.addEqualTo(QuestionnaireConstants.QUESTIONNAIRE_SEQUENCE_ID_PARAMETER_NAME, questionnaireSeqId);
-        String[] columns = {"max(" + QuestionnaireConstants.QUESTIONNAIRE_SEQUENCE_NUMBER_PARAMETER_NAME + ")"};
-        ReportQueryByCriteria query = QueryFactory.newReportQuery(Questionnaire.class, columns, criteria, false);
-        Iterator iter = getPersistenceBrokerTemplate().getReportQueryIteratorByQuery(query);
-        if (iter.hasNext()) {
-            Object[] objects = (Object[]) iter.next();
-            return ((BigDecimal) objects[0]).intValue();
-        } else {
-            return null;
+        final String[] columns = {"max(" + QuestionnaireConstants.QUESTIONNAIRE_SEQUENCE_NUMBER_PARAMETER_NAME + ")"};
+        final ReportQueryByCriteria query = QueryFactory.newReportQuery(Questionnaire.class, columns, criteria, false);
+        final Iterator iter = getPersistenceBrokerTemplate().getReportQueryIteratorByQuery(query);
+        final Integer sequenceNumber = iter.hasNext() ? ((BigDecimal) ((Object[]) iter.next())[0]).intValue() : null;
+        while (iter.hasNext()) {
+            iter.next(); // exhaust the iterator so the db resources will be closed.  See org.apache.ojb.broker.accesslayer.OJBIterator
         }
+
+        return sequenceNumber;
     }
 
 }
