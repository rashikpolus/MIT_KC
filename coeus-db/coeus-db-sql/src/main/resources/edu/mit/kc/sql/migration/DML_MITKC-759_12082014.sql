DELETE FROM COMM_SCHEDULE_MINUTES;
DELETE FROM COMM_SCHEDULE_MINUTE_DOC;
DELETE FROM COMM_SCHEDULE_ATTENDANCE;
DELETE FROM COMM_SCHEDULE_ACT_ITEMS;
DELETE FROM COMM_BATCH_CORRESP_DETAIL;
DELETE FROM COMM_BATCH_CORRESP;
DELETE FROM PROTOCOL_EXEMPT_CHKLST;
DELETE FROM PROTOCOL_EXPIDITED_CHKLST;
DELETE FROM PROTOCOL_CORRESPONDENCE;
DELETE FROM PROTOCOL_ACTIONS;
DELETE FROM PROTOCOL_REVIEWERS;
DELETE FROM PROTOCOL_VOTE_ABSTAINEES;
DELETE FROM PROTOCOL_SUBMISSION_DOC;
DELETE FROM PROTOCOL_SUBMISSION;
DELETE FROM SCHEDULE_AGENDA;
DELETE FROM COMM_SCHEDULE;
DELETE FROM COMM_RESEARCH_AREAS;
DELETE FROM COMM_MEMBER_EXPERTISE;
DELETE FROM COMM_MEMBER_ROLES;
DELETE FROM COMM_MEMBERSHIPS;
DELETE FROM COMMITTEE;
DELETE FROM COMMITTEE_DOCUMENT;
commit
/
DROP TABLE COMMITTEE_MAPPING
/
CREATE TABLE COMMITTEE_MAPPING(ID	NUMBER(12,0),
COMMITTEE_ID	VARCHAR2(15),
SEQUENCE_NUMBER	NUMBER(4,0))
/
INSERT INTO COMMITTEE_MAPPING(ID,COMMITTEE_ID,SEQUENCE_NUMBER)
SELECT SEQ_COMMITTEE_ID.NEXTVAL,a.COMMITTEE_ID,a.SEQUENCE_NUMBER FROM(
SELECT distinct COMMITTEE_ID,SEQUENCE_NUMBER FROM OSP$COMM_MEMBERSHIPS@coeus.kuali) a
/
DROP TABLE TEMP_PROTO_SUBMISSION_DOC
/
CREATE TABLE TEMP_PROTO_SUBMISSION_DOC
   (	"PROTOCOL_NUMBER" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"SUBMISSION_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"DOCUMENT_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(300 BYTE), 
	"DOCUMENT" BLOB, 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 BYTE), 
	"MIME_TYPE" VARCHAR2(100 BYTE))
/
commit
/
INSERT INTO TEMP_PROTO_SUBMISSION_DOC(PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,MIME_TYPE,DESCRIPTION)
select PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,MIME_TYPE,DESCRIPTION from OSP$PROTOCOL_SUBMISSION_DOC@coeus.kuali	
/
commit
/
DROP TABLE TEMP_PROTO_ATTACHMENT_FILE
/
CREATE TABLE "TEMP_PROTO_ATTACHMENT_FILE" 
   ("PROTOCOL_NUMBER" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"DOCUMENT_TYPE_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(300 BYTE) NOT NULL ENABLE, 
	"DOCUMENT" BLOB NOT NULL ENABLE, 
	"UPDATE_TIMESTAMP" DATE, 
	"UPDATE_USER" VARCHAR2(8 BYTE), 
	"VERSION_NUMBER" NUMBER(3,0) NOT NULL ENABLE, 
	"DOCUMENT_STATUS_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"DOCUMENT_ID" NUMBER(4,0) NOT NULL ENABLE);
	commit;
	
DROP TABLE TEMP_PERSONNEL_ATTACHMENT_FILE
/
 CREATE TABLE "TEMP_PERSONNEL_ATTACHMENT_FILE" 
   (	"PROTOCOL_NUMBER" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"DOCUMENT_ID" NUMBER(3,0) NOT NULL ENABLE, 
	"DOCUMENT_TYPE_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"DESCRIPTION" VARCHAR2(2000 BYTE) NOT NULL ENABLE, 
	"FILE_NAME" VARCHAR2(300 BYTE) NOT NULL ENABLE, 
	"DOCUMENT" BLOB, 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE);
	commit
/	
DECLARE
li_ver_nbr NUMBER(8):=1;
li_sequence NUMBER(4,0);
li_comm_id NUMBER(12,0);
ls_doc_num VARCHAR2(40);
ls_doc_status VARCHAR2(1):='F';
ls_doc_typ_nm VARCHAR2(64):='CommitteeDocument';
li_doc_typ_id NUMBER(19,0);
li_rte_lvl NUMBER(8,0):=0;
ll_stat_mdfn_dt DATE:=sysdate;
ll_crte_dt DATE:=sysdate;
ll_aprv_dt DATE:=sysdate;
ll_fnl_dt DATE:=null;
ll_rt_stat_mdfn_dt DATE:=sysdate;
ll_rte_lvl_mdfn_dt DATE:=null;
ls_title VARCHAR2(255);
ls_app_doc_id VARCHAR2(255):=null;
li_doc_ver_nbr 	NUMBER(8,0):=1;
ls_initr_prncpl_id VARCHAR2(40);
li_krew_ver_nbr NUMBER(8,0):=1;
ls_rte_prncpl_id VARCHAR2(40):=null;
ls_dtype VARCHAR2(50):=null;
ls_app_doc_stat VARCHAR2(64):=null;
ls_app_doc_stat_mdfn_dt DATE:=null;
ls_fdoc_desc VARCHAR2(40):='IRB Committee';
CURSOR c_comm IS
SELECT cm.ID,c.COMMITTEE_ID,cm.SEQUENCE_NUMBER,c.COMMITTEE_NAME,c.HOME_UNIT_NUMBER,c.DESCRIPTION,c.SCHEDULE_DESCRIPTION,DECODE(c.COMMITTEE_TYPE_CODE,2,3,c.COMMITTEE_TYPE_CODE) COMMITTEE_TYPE_CODE,c.MINIMUM_MEMBERS_REQUIRED,c.MAX_PROTOCOLS,c.ADV_SUBMISSION_DAYS_REQ,c.DEFAULT_REVIEW_TYPE_CODE,c.APPLICABLE_REVIEW_TYPE_CODE,c.CREATE_TIMESTAMP,c.CREATE_USER,c.UPDATE_TIMESTAMP,c.UPDATE_USER 
FROM OSP$COMMITTEE@coeus.kuali c INNER JOIN COMMITTEE_MAPPING cm ON c.COMMITTEE_ID=cm.COMMITTEE_ID;
r_comm c_comm%ROWTYPE;

BEGIN
IF c_comm%ISOPEN THEN
CLOSE c_comm;
END IF;
OPEN c_comm;
LOOP
FETCH c_comm INTO r_comm;
EXIT WHEN c_comm%NOTFOUND;

li_comm_id:=r_comm.ID;
li_sequence:=r_comm.SEQUENCE_NUMBER;

SELECT KREW_DOC_HDR_S.NEXTVAL INTO ls_doc_num FROM DUAL;
begin  --UMB added max() below
SELECT max(DOC_TYP_ID) INTO li_doc_typ_id FROM KREW_DOC_TYP_T WHERE DOC_TYP_NM=ls_doc_typ_nm;
exception when others then
li_doc_typ_id:=NULL;
end;
begin
select PRNCPL_ID into ls_initr_prncpl_id from  KRIM_PRNCPL_T where LOWER(PRNCPL_NM) = LOWER(r_comm.UPDATE_USER);
exception when others then
ls_initr_prncpl_id := 'unknownuser';
end;

INSERT INTO COMMITTEE_DOCUMENT(DOCUMENT_NUMBER,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMITTEE_ID,DOC_STATUS_CODE)
VALUES(ls_doc_num,r_comm.UPDATE_TIMESTAMP,LOWER(r_comm.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_comm.COMMITTEE_ID,ls_doc_status);

begin
INSERT INTO COMMITTEE(ID,DOCUMENT_NUMBER,COMMITTEE_ID,COMMITTEE_NAME,HOME_UNIT_NUMBER,DESCRIPTION,SCHEDULE_DESCRIPTION,COMMITTEE_TYPE_CODE,MINIMUM_MEMBERS_REQUIRED,MAX_PROTOCOLS,ADV_SUBMISSION_DAYS_REQ,DEFAULT_REVIEW_TYPE_CODE,APPLICABLE_REVIEW_TYPE_CODE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SEQUENCE_NUMBER,OBJ_ID,COI_REVIEW_TYPE_CODE)
VALUES(li_comm_id,ls_doc_num,r_comm.COMMITTEE_ID,r_comm.COMMITTEE_NAME,r_comm.HOME_UNIT_NUMBER,r_comm.DESCRIPTION,r_comm.SCHEDULE_DESCRIPTION,r_comm.COMMITTEE_TYPE_CODE,r_comm.MINIMUM_MEMBERS_REQUIRED,r_comm.MAX_PROTOCOLS,r_comm.ADV_SUBMISSION_DAYS_REQ,NULL,r_comm.APPLICABLE_REVIEW_TYPE_CODE,r_comm.CREATE_TIMESTAMP,r_comm.CREATE_USER,r_comm.UPDATE_TIMESTAMP,LOWER(r_comm.UPDATE_USER),li_ver_nbr,li_sequence,SYS_GUID(),null);
exception
when others then
dbms_output.put_line('ERROR IN COMMITTEE ID:'||r_comm.COMMITTEE_ID||'-'||sqlerrm);
end;

INSERT INTO KREW_DOC_HDR_T(DOC_HDR_ID,DOC_TYP_ID,DOC_HDR_STAT_CD,RTE_LVL,STAT_MDFN_DT,CRTE_DT,APRV_DT,FNL_DT,RTE_STAT_MDFN_DT,TTL,APP_DOC_ID,DOC_VER_NBR,INITR_PRNCPL_ID,VER_NBR,RTE_PRNCPL_ID,DTYPE,OBJ_ID,APP_DOC_STAT,APP_DOC_STAT_MDFN_DT)
VALUES(ls_doc_num,li_doc_typ_id,ls_doc_status,li_rte_lvl,ll_stat_mdfn_dt,ll_crte_dt,ll_aprv_dt,ll_fnl_dt,ll_rt_stat_mdfn_dt,ls_title,ls_app_doc_id,li_doc_ver_nbr,ls_initr_prncpl_id,li_krew_ver_nbr,ls_rte_prncpl_id,ls_dtype,SYS_GUID(),ls_app_doc_stat,ls_app_doc_stat_mdfn_dt);

INSERT INTO KRNS_DOC_HDR_T(DOC_HDR_ID,OBJ_ID,VER_NBR,FDOC_DESC,ORG_DOC_HDR_ID,TMPL_DOC_HDR_ID,EXPLANATION)
VALUES(ls_doc_num,SYS_GUID(),li_ver_nbr,ls_fdoc_desc,NULL,NULL,NULL);

INSERT INTO KREW_DOC_HDR_CNTNT_T(DOC_HDR_ID,DOC_CNTNT_TXT)
VALUES(ls_doc_num,NULL);

proc_insert_more_krew(ls_doc_num,ls_initr_prncpl_id,li_doc_typ_id);

END LOOP;
CLOSE c_comm;
commit;
dbms_output.put_line('COMPLETED COMMITTEE');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_membership_id NUMBER(12,0);
li_rolodex_id NUMBER(12,0);
ls_person_id VARCHAR2(40);
li_rolodex_count NUMBER;
li_committee NUMBER(12,0);
li_sequence NUMBER(4);
ls_memb_id VARCHAR2(10);
li_member_role NUMBER(12,0);
li_member_expertise NUMBER(12,0);
CURSOR c_member IS
SELECT c.ID,cm.MEMBERSHIP_ID,cm.SEQUENCE_NUMBER,cm.COMMITTEE_ID,cm.PERSON_ID,cm.PERSON_NAME,cm.NON_EMPLOYEE_FLAG,cm.PAID_MEMBER_FLAG,cm.TERM_START_DATE,cm.TERM_END_DATE,cm.MEMBERSHIP_TYPE_CODE,cm.COMMENTS,cm.UPDATE_TIMESTAMP,cm.UPDATE_USER 
FROM OSP$COMM_MEMBERSHIPS@coeus.kuali cm INNER JOIN COMMITTEE_MAPPING c ON c.COMMITTEE_ID=cm.COMMITTEE_ID AND c.SEQUENCE_NUMBER=cm.SEQUENCE_NUMBER;
r_member c_member%ROWTYPE;

CURSOR c_member_role(as_membership_id VARCHAR2,as_sequence NUMBER) IS
SELECT MEMBERSHIP_ID,SEQUENCE_NUMBER,MEMBERSHIP_ROLE_CODE,START_DATE,END_DATE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_MEMBER_ROLES@coeus.kuali
WHERE MEMBERSHIP_ID=as_membership_id AND SEQUENCE_NUMBER=(select max(sequence_number) from OSP$COMM_MEMBER_ROLES@coeus.kuali where membership_id=as_membership_id);
r_member_role c_member_role%ROWTYPE;

CURSOR c_expertise(as_membership_id VARCHAR2,as_sequence NUMBER) IS
SELECT MEMBERSHIP_ID,SEQUENCE_NUMBER,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_MEMBER_EXPERTISE@coeus.kuali
WHERE MEMBERSHIP_ID=as_membership_id AND SEQUENCE_NUMBER=(select max(sequence_number) from OSP$COMM_MEMBER_EXPERTISE@coeus.kuali where membership_id=as_membership_id);
r_expertise c_expertise%ROWTYPE;


BEGIN
IF c_member%ISOPEN THEN
CLOSE c_member;
END IF;
OPEN c_member;
LOOP
FETCH c_member INTO r_member;
EXIT WHEN c_member%NOTFOUND;
ls_memb_id:=r_member.MEMBERSHIP_ID;
li_sequence:=r_member.SEQUENCE_NUMBER;
SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_membership_id FROM DUAL;

li_committee:=r_member.ID;

li_rolodex_id:=null;
ls_person_id:=null;
IF  r_member.NON_EMPLOYEE_FLAG='Y' THEN
select count(rolodex_id) into li_rolodex_count from ROLODEX where to_char(rolodex_id)=r_member.PERSON_ID;
if li_rolodex_count>0 then
li_rolodex_id:=r_member.PERSON_ID;
ls_person_id:=null;
else
ls_person_id:=r_member.PERSON_ID;
li_rolodex_id:=null;

end if;
ELSE     
ls_person_id:=r_member.PERSON_ID;      

END IF;  

begin
INSERT INTO COMM_MEMBERSHIPS(COMM_MEMBERSHIP_ID,COMMITTEE_ID_FK,PERSON_ID,ROLODEX_ID,PERSON_NAME,MEMBERSHIP_ID,PAID_MEMBER_FLAG,TERM_START_DATE,TERM_END_DATE,MEMBERSHIP_TYPE_CODE,COMMENTS,CONTACT_NOTES,TRAINING_NOTES,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_membership_id,li_committee,ls_person_id,li_rolodex_id,r_member.PERSON_NAME,r_member.MEMBERSHIP_ID,r_member.PAID_MEMBER_FLAG,r_member.TERM_START_DATE,r_member.TERM_END_DATE,r_member.MEMBERSHIP_TYPE_CODE,r_member.COMMENTS,NULL,NULL,r_member.UPDATE_TIMESTAMP,r_member.UPDATE_USER,li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_MEMBERSHIPS,COMM_MEMBERSHIP_ID:'||li_membership_id||'-'||sqlerrm);
end;
begin
IF c_member_role%ISOPEN THEN
CLOSE c_member_role;
END IF;
OPEN c_member_role(ls_memb_id,li_sequence);
LOOP
FETCH c_member_role INTO r_member_role;
EXIT WHEN c_member_role%NOTFOUND;


SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_member_role FROM DUAL;

begin
INSERT INTO COMM_MEMBER_ROLES(COMM_MEMBER_ROLES_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,COMM_MEMBERSHIP_ID_FK,MEMBERSHIP_ROLE_CODE,START_DATE,END_DATE,OBJ_ID)
VALUES(li_member_role,r_member_role.UPDATE_TIMESTAMP,LOWER(r_member_role.UPDATE_USER),li_ver_nbr,li_membership_id,r_member_role.MEMBERSHIP_ROLE_CODE,r_member_role.START_DATE,r_member_role.END_DATE,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_MEMBER_ROLES,COMM_MEMBER_ROLES_ID:'||li_member_role||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_member_role;
end;

begin
IF c_expertise%ISOPEN THEN 
CLOSE c_expertise;
END IF;
OPEN c_expertise(ls_memb_id,li_sequence);
LOOP
FETCH c_expertise INTO r_expertise;
EXIT WHEN c_expertise%NOTFOUND;

SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_member_expertise FROM DUAL;
begin
INSERT INTO COMM_MEMBER_EXPERTISE(COMM_MEMBER_EXPERTISE_ID,COMM_MEMBERSHIP_ID_FK,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_member_expertise,li_membership_id,r_expertise.RESEARCH_AREA_CODE,r_expertise.UPDATE_TIMESTAMP,LOWER(r_expertise.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('RESEARCH_AREA_CODE:'||r_expertise.RESEARCH_AREA_CODE||  'NOT IN PARENT TABLE');
end;
END LOOP;
CLOSE c_expertise;
end;

END LOOP;
CLOSE c_member;
dbms_output.put_line('COMPLETED COMM_MEMBERSHIPS');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_research_area NUMBER(12,0);
li_committee_id NUMBER(12,0);

CURSOR c_research IS
SELECT cm.ID,c.COMMITTEE_ID,c.RESEARCH_AREA_CODE,c.UPDATE_TIMESTAMP,c.UPDATE_USER FROM OSP$COMM_RESEARCH_AREAS@coeus.kuali c
INNER JOIN COMMITTEE_MAPPING cm ON c.COMMITTEE_ID=cm.COMMITTEE_ID;
r_research c_research%ROWTYPE;

BEGIN
IF c_research%ISOPEN THEN
CLOSE c_research;
END IF;
OPEN c_research;
LOOP
FETCH c_research INTO r_research;
EXIT WHEN c_research%NOTFOUND;

SELECT SEQ_COMM_RESEARCH_AREAS_ID.NEXTVAL INTO li_research_area FROM DUAL;
li_committee_id:=r_research.ID;

begin
INSERT INTO COMM_RESEARCH_AREAS(ID,COMMITTEE_ID_FK,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_research_area,li_committee_id,r_research.RESEARCH_AREA_CODE,r_research.UPDATE_TIMESTAMP,LOWER(r_research.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('Error while inserting data into COMM_RESEARCH_AREAS. RESEARCH_AREA_CODE: '||r_research.RESEARCH_AREA_CODE||' and error is '||sqlerrm);
end;
END LOOP;
CLOSE c_research;
commit;
dbms_output.put_line('COMPLETED COMM_RESEARCH_AREAS');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_comm_schedule NUMBER(12,0);
li_committe_id NUMBER(12,0);
ls_available_to_reviewers VARCHAR2(1):='N';

CURSOR c_schedule IS
SELECT c.SCHEDULE_ID,c.COMMITTEE_ID,c.SCHEDULED_DATE,c.PLACE,c.TIME,c.PROTOCOL_SUB_DEADLINE,c.SCHEDULE_STATUS_CODE,c.MEETING_DATE,c.START_TIME,c.END_TIME,c.AGENDA_PROD_REV_DATE,c.MAX_PROTOCOLS,c.COMMENTS,c.UPDATE_TIMESTAMP,c.UPDATE_USER,c.VIEW_IN_LITE 
FROM OSP$COMM_SCHEDULE@coeus.kuali c;
r_schedule c_schedule%ROWTYPE;

BEGIN
IF c_schedule%ISOPEN THEN
CLOSE c_schedule;
END IF;
OPEN c_schedule;
LOOP
FETCH c_schedule INTO r_schedule;
EXIT WHEN c_schedule%NOTFOUND;

SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_comm_schedule FROM DUAL;

begin
SELECT ID INTO li_committe_id FROM COMMITTEE WHERE COMMITTEE_ID=r_schedule.COMMITTEE_ID AND SEQUENCE_NUMBER=(SELECT MAX(c.SEQUENCE_NUMBER) FROM  COMMITTEE c WHERE c.COMMITTEE_ID=r_schedule.COMMITTEE_ID);
exception
when others then
dbms_output.put_line('Missing ID in COMMITTEE for COMMITTEE_ID:'||r_schedule.COMMITTEE_ID||'-'||sqlerrm);
end;

begin
INSERT INTO COMM_SCHEDULE(ID,SCHEDULE_ID,COMMITTEE_ID_FK,SCHEDULED_DATE,PLACE,TIME,PROTOCOL_SUB_DEADLINE,SCHEDULE_STATUS_CODE,MEETING_DATE,START_TIME,END_TIME,AGENDA_PROD_REV_DATE,MAX_PROTOCOLS,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,AVAILABLE_TO_REVIEWERS)
VALUES(li_comm_schedule,r_schedule.SCHEDULE_ID,li_committe_id,r_schedule.SCHEDULED_DATE,r_schedule.PLACE,r_schedule.TIME,r_schedule.PROTOCOL_SUB_DEADLINE,r_schedule.SCHEDULE_STATUS_CODE,r_schedule.MEETING_DATE,r_schedule.START_TIME,r_schedule.END_TIME,r_schedule.AGENDA_PROD_REV_DATE,r_schedule.MAX_PROTOCOLS,r_schedule.COMMENTS,r_schedule.UPDATE_TIMESTAMP,LOWER(r_schedule.UPDATE_USER),li_ver_nbr,SYS_GUID(),ls_available_to_reviewers);
exception
when others then
dbms_output.put_line('ERROR IN COMM_SCHEDULE,SCHEDULE_ID:'||r_schedule.SCHEDULE_ID||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_schedule;
commit;
dbms_output.put_line('COMPLETED COMM_SCHEDULE');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_schedule_act_item NUMBER(12,0);
li_schedule_id NUMBER(12,0);

CURSOR c_act_item IS
SELECT csa.SCHEDULE_ID,csa.ACTION_ITEM_NUMBER,csa.SCHEDULE_ACT_ITEM_TYPE_CODE,csa.ITEM_DESCTIPTION,csa.UPDATE_TIMESTAMP,csa.UPDATE_USER FROM 
OSP$COMM_SCHEDULE_ACT_ITEMS@coeus.kuali csa;
r_act_item c_act_item%ROWTYPE;

BEGIN
IF c_act_item%ISOPEN THEN 
CLOSE c_act_item;
END IF;
OPEN c_act_item;
LOOP
FETCH c_act_item INTO r_act_item;
EXIT WHEN c_act_item%NOTFOUND;

SELECT SEQ_MEETING_ID.NEXTVAL INTO li_schedule_act_item FROM DUAL;
begin
SELECT ID INTO li_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_act_item.SCHEDULE_ID;
exception
when others then
dbms_output.put_line('Error while fetching ID using SCHEDULE_ID:'||r_act_item.SCHEDULE_ID||'and error is:'||sqlerrm);
end;

begin
INSERT INTO COMM_SCHEDULE_ACT_ITEMS(COMM_SCHEDULE_ACT_ITEMS_ID,SCHEDULE_ID_FK,ACTION_ITEM_NUMBER,SCHEDULE_ACT_ITEM_TYPE_CODE,ITEM_DESCRIPTION,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_schedule_act_item,li_schedule_id,r_act_item.ACTION_ITEM_NUMBER,r_act_item.SCHEDULE_ACT_ITEM_TYPE_CODE,r_act_item.ITEM_DESCTIPTION,r_act_item.UPDATE_TIMESTAMP,LOWER(r_act_item.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_SCHEDULE_ACT_ITEMS,SCHEDULE_ID_FK:'||li_schedule_id||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_act_item;
commit;
dbms_output.put_line('COMPLETED COMM_SCHEDULE_ACT_ITEMS');
END;
/
create or replace
PROCEDURE PROC_AMMENDMENT_CHILD(as_proto_num IN VARCHAR2,as_sequence IN NUMBER,as_coeus_sequence IN NUMBER, as_flag IN CHAR)
IS
li_protocol_id NUMBER(12,0);
li_committee_id NUMBER(12,0);
li_comm_schedule_id NUMBER(12,0);
ls_submission_status VARCHAR2(3);
ls_is_billable VARCHAR2(1):='N';
ls_comm_decision_motion VARCHAR2(3);
li_location_id NUMBER(12,0);
li_research_areas_id NUMBER(12,0);
li_notepad_id NUMBER(12,0);
ls_note_type VARCHAR2(60);
ll_comments CLOB;
li_proto_person_id NUMBER(12,0);
ls_person_id VARCHAR2(40);
li_rolodex_id NUMBER(12,0);
ls_full_name VARCHAR2(90);
li_reviewers_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
li_protocol_person_id NUMBER(12,0);
li_protocol_units_id NUMBER(12,0);
li_sequence_num NUMBER(4);
li_protocol_special_review_id NUMBER(12,0);
ls_comment CLOB;
l_tmp LONG;
li_vulnerable_id NUMBER(12,0);
li_protocol_funding_id NUMBER(12,0);
li_protocol_refference_id NUMBER(12,0);
li_correspondence_id NUMBER(12,0);
li_num NUMBER:=NULL;
li_risk_level_id NUMBER(12,0);
li_submission NUMBER(4);
ls_content_type VARCHAR2(255);
li_file_id	NUMBER(22,0);
li_count number;
li_seq NUMBER(4);
li_personnel_id NUMBER(12,0);
li_ver_nbr NUMBER(8):=1;
li_rolodex_count NUMBER;
li_protocol_action_id NUMBER(12,0);
li_expedited_id NUMBER(12,0);
li_exempt_checklist_id NUMBER(12,0);
li_submission_doc_id NUMBER(12,0);
li_pa_id NUMBER(12,0);
ls_proto_num VARCHAR2(20);
ls_number VARCHAR2(20):=NULL;
li_sequence_number NUMBER(4);
li_seq_number NUMBER(4);
ls_proto_action_type VARCHAR2(3);
ls_proto_status VARCHAR2(3);
ls_person VARCHAR2(40);
li_submission_number NUMBER(4):=NULL;
li_sequence NUMBER(4);
ls_num NUMBER(4);
li_protocol_reviewer NUMBER(12,0);
li_comm_schecule_id NUMBER(12,0);
li_act_items_id NUMBER(12,0);
ll_minute_entry CLOB;
li_schedule_minutes_id NUMBER(12,0);
ls_contingency_code VARCHAR2(4);
ls_funding_source VARCHAR2(200);


CURSOR c_proto_sub(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_STATUS_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_SUBMISSION@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER ;
r_proto_sub c_proto_sub%ROWTYPE;


CURSOR c_location(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_ORG_TYPE_CODE,ORGANIZATION_ID,ROLODEX_ID,UPDATE_TIMESTAMP,UPDATE_USER FROM
OSP$PROTOCOL_LOCATION@coeus.kuali  WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_location c_location%ROWTYPE;

CURSOR c_research(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_RESEARCH_AREAS@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_research c_research%ROWTYPE;

CURSOR c_notepad(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,ENTRY_NUMBER,SEQUENCE_NUMBER,COMMENTS,RESTRICTED_VIEW,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_NOTEPAD@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_notepad c_notepad%ROWTYPE;

CURSOR c_person(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT inv.PROTOCOL_NUMBER,inv.SEQUENCE_NUMBER,inv.PERSON_ID,inv.PERSON_NAME,decode(PRINCIPAL_INVESTIGATOR_FLAG,'Y','PI','N','COI') ROLE_ID,inv.NON_EMPLOYEE_FLAG,inv.AFFILIATION_TYPE_CODE,inv.UPDATE_TIMESTAMP,inv.UPDATE_USER,
p.SSN,p.LAST_NAME,p.FIRST_NAME,p.MIDDLE_NAME,p.PRIOR_NAME,p.USER_NAME,p.EMAIL_ADDRESS,p.DATE_OF_BIRTH,p.AGE,p.AGE_BY_FISCAL_YEAR,p.GENDER,p.RACE,p.EDUCATION_LEVEL,p.DEGREE,p.MAJOR,
p.IS_HANDICAPPED,p.HANDICAP_TYPE,p.IS_VETERAN,p.VETERAN_TYPE,p.VISA_CODE,p.VISA_TYPE,p.VISA_RENEWAL_DATE,p.HAS_VISA,p.OFFICE_LOCATION,p.OFFICE_PHONE,p.SECONDRY_OFFICE_LOCATION,p.SECONDRY_OFFICE_PHONE,
p.SCHOOL,p.YEAR_GRADUATED,p.DIRECTORY_DEPARTMENT,p.SALUTATION,p.COUNTRY_OF_CITIZENSHIP,p.PRIMARY_TITLE,p.DIRECTORY_TITLE,p.HOME_UNIT,p.IS_FACULTY,p.IS_GRADUATE_STUDENT_STAFF,p.IS_RESEARCH_STAFF,p.IS_SERVICE_STAFF,
p.IS_SUPPORT_STAFF,p.IS_OTHER_ACCADEMIC_GROUP,p.IS_MEDICAL_STAFF,p.VACATION_ACCURAL,p.IS_ON_SABBATICAL,p.ID_PROVIDED,p.ID_VERIFIED,p.ADDRESS_LINE_1,p.ADDRESS_LINE_2,p.ADDRESS_LINE_3,p.CITY,p.COUNTY,p.STATE,p.POSTAL_CODE,
p.COUNTRY_CODE,p.FAX_NUMBER,p.PAGER_NUMBER,p.MOBILE_PHONE_NUMBER,p.ERA_COMMONS_USER_NAME FROM OSP$PROTOCOL_INVESTIGATORS@coeus.kuali inv LEFT JOIN OSP$PERSON@coeus.kuali p ON (inv.PERSON_ID=p.PERSON_ID)
WHERE inv.NON_EMPLOYEE_FLAG='N' AND PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence

UNION ALL

SELECT inv.PROTOCOL_NUMBER,inv.SEQUENCE_NUMBER,inv.PERSON_ID,inv.PERSON_NAME,decode(PRINCIPAL_INVESTIGATOR_FLAG,'Y','PI','N','COI') ROLE_ID,inv.NON_EMPLOYEE_FLAG,inv.AFFILIATION_TYPE_CODE,inv.UPDATE_TIMESTAMP,inv.UPDATE_USER,
NULL,r.LAST_NAME,r.FIRST_NAME,r.MIDDLE_NAME,NULL,NULL,r.EMAIL_ADDRESS,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,r.TITLE,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,NULL,NULL,r.ADDRESS_LINE_1,r.ADDRESS_LINE_2,r.ADDRESS_LINE_3,r.CITY,r.COUNTY,r.STATE,r.POSTAL_CODE,
r.COUNTRY_CODE,r.FAX_NUMBER,NULL,NULL,NULL FROM OSP$PROTOCOL_INVESTIGATORS@coeus.kuali inv LEFT JOIN OSP$ROLODEX@coeus.kuali r ON (inv.PERSON_ID=r.ROLODEX_ID)
WHERE inv.NON_EMPLOYEE_FLAG='Y' AND PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_person c_person%ROWTYPE;

CURSOR c_reviewers(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PERSON_ID,REVIEWER_TYPE_CODE,NON_EMPLOYEE_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,ASSIGNED_DATE,DUE_DATE,REVIEW_COMPLETE,RECOMMENDED_ACTION FROM OSP$PROTOCOL_REVIEWERS@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_reviewers c_reviewers%ROWTYPE;

CURSOR c_units(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,UNIT_NUMBER,PERSON_ID,LEAD_UNIT_FLAG,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_UNITS@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_units c_units%ROWTYPE;


CURSOR c_action(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,SUBMISSION_NUMBER,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,ACTION_DATE FROM OSP$PROTOCOL_ACTIONS@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_action c_action%ROWTYPE;

CURSOR c_special_review(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SPECIAL_REVIEW_NUMBER,SPECIAL_REVIEW_CODE,APPROVAL_TYPE_CODE,SP_REV_PROTOCOL_NUMBER,APPLICATION_DATE,APPROVAL_DATE,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_SPECIAL_REVIEW@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER =as_coeus_sequence;
r_special_review c_special_review%ROWTYPE;

CURSOR c_vulnerable_subject(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,VULNERABLE_SUBJECT_TYPE_CODE,SUBJECT_COUNT,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_VULNERABLE_SUB@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
r_vulnerable_subject c_vulnerable_subject%ROWTYPE;


CURSOR c_key_person(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT pkp.PROTOCOL_NUMBER,pkp.SEQUENCE_NUMBER,pkp.PERSON_ID,pkp.PERSON_NAME,pkp.PERSON_ROLE,pkp.NON_EMPLOYEE_FLAG,pkp.AFFILIATION_TYPE_CODE,pkp.UPDATE_TIMESTAMP,pkp.UPDATE_USER,
p.SSN,p.LAST_NAME,p.FIRST_NAME,p.MIDDLE_NAME,p.PRIOR_NAME,p.USER_NAME,p.EMAIL_ADDRESS,p.DATE_OF_BIRTH,p.AGE,p.AGE_BY_FISCAL_YEAR,p.GENDER,p.RACE,p.EDUCATION_LEVEL,p.DEGREE,p.MAJOR,
p.IS_HANDICAPPED,p.HANDICAP_TYPE,p.IS_VETERAN,p.VETERAN_TYPE,p.VISA_CODE,p.VISA_TYPE,p.VISA_RENEWAL_DATE,p.HAS_VISA,p.OFFICE_LOCATION,p.OFFICE_PHONE,p.SECONDRY_OFFICE_LOCATION,p.SECONDRY_OFFICE_PHONE,
p.SCHOOL,p.YEAR_GRADUATED,p.DIRECTORY_DEPARTMENT,p.SALUTATION,p.COUNTRY_OF_CITIZENSHIP,p.PRIMARY_TITLE,p.DIRECTORY_TITLE,p.HOME_UNIT,p.IS_FACULTY,p.IS_GRADUATE_STUDENT_STAFF,p.IS_RESEARCH_STAFF,p.IS_SERVICE_STAFF,
p.IS_SUPPORT_STAFF,p.IS_OTHER_ACCADEMIC_GROUP,p.IS_MEDICAL_STAFF,p.VACATION_ACCURAL,p.IS_ON_SABBATICAL,p.ID_PROVIDED,p.ID_VERIFIED,p.ADDRESS_LINE_1,p.ADDRESS_LINE_2,p.ADDRESS_LINE_3,p.CITY,p.COUNTY,p.STATE,p.POSTAL_CODE,
p.COUNTRY_CODE,p.FAX_NUMBER,p.PAGER_NUMBER,p.MOBILE_PHONE_NUMBER,p.ERA_COMMONS_USER_NAME FROM OSP$PROTOCOL_KEY_PERSONS@coeus.kuali pkp LEFT JOIN OSP$PERSON@coeus.kuali p ON (pkp.PERSON_ID=p.PERSON_ID)
WHERE pkp.NON_EMPLOYEE_FLAG='N' AND PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence

UNION ALL

SELECT pkp.PROTOCOL_NUMBER,pkp.SEQUENCE_NUMBER,pkp.PERSON_ID,pkp.PERSON_NAME,pkp.PERSON_ROLE,pkp.NON_EMPLOYEE_FLAG,pkp.AFFILIATION_TYPE_CODE,pkp.UPDATE_TIMESTAMP,pkp.UPDATE_USER,
NULL,r.LAST_NAME,r.FIRST_NAME,r.MIDDLE_NAME,NULL,NULL,r.EMAIL_ADDRESS,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,r.TITLE,NULL,NULL,NULL,NULL,NULL,NULL,
NULL,NULL,NULL,NULL,NULL,NULL,NULL,r.ADDRESS_LINE_1,r.ADDRESS_LINE_2,r.ADDRESS_LINE_3,r.CITY,r.COUNTY,r.STATE,r.POSTAL_CODE,
r.COUNTRY_CODE,r.FAX_NUMBER,NULL,NULL,NULL FROM OSP$PROTOCOL_KEY_PERSONS@coeus.kuali pkp LEFT JOIN OSP$ROLODEX@coeus.kuali r ON (pkp.PERSON_ID=r.ROLODEX_ID)
WHERE pkp.NON_EMPLOYEE_FLAG='Y' AND PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
r_key_person c_key_person%ROWTYPE ;

CURSOR c_funding(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,FUNDING_SOURCE_TYPE_CODE,FUNDING_SOURCE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_FUNDING_SOURCE@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
r_funding c_funding%ROWTYPE;


CURSOR c_correspondent(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT  PROTOCOL_NUMBER,ACTION_ID,PROTO_CORRESP_TYPE_CODE,SEQUENCE_NUMBER,CORRESPONDENCE,UPDATE_TIMESTAMP,UPDATE_USER,NVL(FINAL_FLAG,'N') FINAL_FLAG
FROM TEMP_PROTO_CORRESPONDENDE WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID ;
r_correspondent c_correspondent%ROWTYPE;

CURSOR c_refference(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_REFERENCE_NUMBER,PROTOCOL_REFERENCE_TYPE_CODE,REFERENCE_KEY,APPLICATION_DATE,APPROVAL_DATE,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_REFERENCES@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
r_refference c_refference%ROWTYPE;

CURSOR c_risk_level(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,RISK_LEVEL_CODE,COMMENTS,DATE_ASSIGNED,DATE_UPDATED,STATUS,UPDATE_USER,UPDATE_TIMESTAMP FROM OSP$PROTOCOL_RISK_LEVELS@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER;
r_risk_level c_risk_level%ROWTYPE;

CURSOR c_exempt(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_EXEMPT_CHKLST@coeus.kuali 
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_exempt c_exempt%ROWTYPE;


CURSOR c_expedited(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_EXPIDITED_CHKLST@coeus.kuali 
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_expedited c_expedited%ROWTYPE;

CURSOR c_doc(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,MIME_TYPE,DESCRIPTION
FROM TEMP_PROTO_SUBMISSION_DOC WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_doc c_doc%ROWTYPE;


CURSOR c_attach(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,VERSION_NUMBER,DOCUMENT_TYPE_CODE,DOCUMENT_ID,DESCRIPTION,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,DOCUMENT_STATUS_CODE
FROM TEMP_PROTO_ATTACHMENT_FILE WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,DOCUMENT_ID;
r_attach c_attach%ROWTYPE;


--CURSOR c_personnel_attach(c_proto_num VARCHAR2,c_sequence NUMBER) IS
--SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,DOCUMENT_ID,DOCUMENT_TYPE_CODE,DESCRIPTION,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER
--FROM TEMP_PERSONNEL_ATTACHMENT_FILE WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,DOCUMENT_ID;
--r_personnel_attach c_personnel_attach%ROWTYPE;

CURSOR c_minutes(c_proto_num VARCHAR2,c_sequence NUMBER) IS
SELECT SCHEDULE_ID,ENTRY_NUMBER,MINUTE_ENTRY_TYPE_CODE,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PRIVATE_COMMENT_FLAG,PROTOCOL_CONTINGENCY_CODE,MINUTE_ENTRY,UPDATE_TIMESTAMP,UPDATE_USER,FINAL_FLAG,PERSON_ID,CREATE_USER,CREATE_TIMESTAMP FROM OSP$COMM_SCHEDULE_MINUTES@coeus.kuali
WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_minutes c_minutes%ROWTYPE;

BEGIN
IF as_flag='SUBMISSION' THEN

IF c_proto_sub%ISOPEN THEN
CLOSE c_proto_sub;
END IF;
OPEN c_proto_sub(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_proto_sub INTO r_proto_sub;
EXIT WHEN c_proto_sub%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_submission_id FROM DUAL;
begin
SELECT ID INTO li_committee_id FROM COMMITTEE WHERE COMMITTEE_ID=r_proto_sub.COMMITTEE_ID AND SEQUENCE_NUMBER=(SELECT MAX(c.SEQUENCE_NUMBER) FROM COMMITTEE c WHERE c.COMMITTEE_ID=r_proto_sub.COMMITTEE_ID);
exception
when others then
li_committee_id:=NULL;
end;
begin
SELECT ID INTO li_comm_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_proto_sub.SCHEDULE_ID;
exception
when others then
li_comm_schedule_id:=NULL;
end;


ls_submission_status:=r_proto_sub.SUBMISSION_STATUS_CODE;

IF ls_submission_status=202 THEN
ls_comm_decision_motion:=3;
ELSIF ls_submission_status=203 THEN
ls_comm_decision_motion:=1;
ELSIF ls_submission_status=205 THEN
ls_comm_decision_motion:=2;
ELSIF ls_submission_status=201 THEN
ls_comm_decision_motion:=4;
ELSE
ls_comm_decision_motion:=NULL;
END IF;




--SELECT MAX(SEQUENCE_NUMBER) INTO li_seq FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=r_proto_sub.PROTOCOL_NUMBER;
IF ls_number IS NULL THEN
ls_number:=r_proto_sub.PROTOCOL_NUMBER;
li_seq:=as_sequence;
ELSIF ls_number!=r_proto_sub.PROTOCOL_NUMBER THEN
ls_number:=r_proto_sub.PROTOCOL_NUMBER;
li_seq:=as_sequence;
END IF;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=r_proto_sub.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line(1||' '||li_seq||'  '||as_proto_num);
end;
begin
INSERT INTO PROTOCOL_SUBMISSION(SUBMISSION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,PROTOCOL_ID,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE)
VALUES(li_submission_id,as_proto_num,li_seq,r_proto_sub.SUBMISSION_NUMBER,r_proto_sub.SCHEDULE_ID,r_proto_sub.COMMITTEE_ID,li_protocol_id,li_comm_schedule_id,li_committee_id,r_proto_sub.SUBMISSION_TYPE_CODE,r_proto_sub.SUBMISSION_TYPE_QUAL_CODE,ls_submission_status,r_proto_sub.PROTOCOL_REVIEW_TYPE_CODE,r_proto_sub.SUBMISSION_DATE,r_proto_sub.COMMENTS,r_proto_sub.YES_VOTE_COUNT,r_proto_sub.NO_VOTE_COUNT,r_proto_sub.ABSTAINER_COUNT,r_proto_sub.VOTING_COMMENTS,r_proto_sub.UPDATE_TIMESTAMP,LOWER(r_proto_sub.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_proto_sub.ABSTAINER_COUNT,ls_is_billable,ls_comm_decision_motion);
exception
when others then
dbms_output.put_line(li_seq||'  '||as_proto_num);
end;

--select min(SUBMISSION_NUMBER) into li_submission from OSP$PROTOCOL_SUBMISSION@coeus.kuali where PROTOCOL_NUMBER=as_proto_num and SEQUENCE_NUMBER=as_coeus_sequence and SUBMISSION_NUMBER>r_proto_sub.SUBMISSION_NUMBER;
IF ls_submission_status=202 OR ls_submission_status=201  THEN
--SELECT MIN(SEQUENCE_NUMBER)INTO li_seq FROM PROTOCOL  WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER>li_seq;


li_seq:=li_seq+1;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=r_proto_sub.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line(2||' '||li_seq||'  '||as_proto_num);
end;
begin
INSERT INTO PROTOCOL_SUBMISSION(SUBMISSION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,PROTOCOL_ID,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,li_seq,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,li_protocol_id,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=r_proto_sub.PROTOCOL_NUMBER AND SEQUENCE_NUMBER< li_seq);
exception
when others then
dbms_output.put_line(li_seq||'  '||as_proto_num);
end;
END IF;

END LOOP;
CLOSE c_proto_sub;

ELSIF as_flag='LOCATION' THEN
IF c_location%ISOPEN THEN
CLOSE c_location;
END IF;
OPEN c_location(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_location INTO r_location;
EXIT WHEN c_location%NOTFOUND;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_location_id FROM DUAL;
--SELECT MAX(SEQUENCE_NUMBER) INTO li_seq FROM PROTOCOL_LOCATION WHERE PROTOCOL_NUMBER=as_proto_num;

--IF li_seq IS NULL THEN
li_seq:=as_sequence;
--END IF;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_LOCATION(PROTOCOL_LOCATION_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_ORG_TYPE_CODE,ORGANIZATION_ID,ROLODEX_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_location_id,li_protocol_id,as_proto_num,li_seq,r_location.PROTOCOL_ORG_TYPE_CODE,r_location.ORGANIZATION_ID,r_location.ROLODEX_ID,r_location.UPDATE_TIMESTAMP,LOWER(r_location.UPDATE_USER),li_ver_nbr,SYS_GUID());

SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_LOCATION(PROTOCOL_LOCATION_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_ORG_TYPE_CODE,ORGANIZATION_ID,ROLODEX_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,PROTOCOL_ORG_TYPE_CODE,ORGANIZATION_ID,ROLODEX_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID()FROM PROTOCOL_LOCATION WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_LOCATION WHERE PROTOCOL_NUMBER=as_proto_num);
END LOOP;
END IF;

END LOOP;
CLOSE c_location;

ELSIF as_flag='RESEARCH' THEN
IF c_research%ISOPEN THEN
CLOSE c_research;
END IF;
OPEN c_research(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_research INTO r_research;
EXIT WHEN c_research%NOTFOUND;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_research_areas_id FROM DUAL;
li_seq:=as_sequence;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;

INSERT INTO PROTOCOL_RESEARCH_AREAS(ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_research_areas_id,li_protocol_id,as_proto_num,li_seq,r_research.RESEARCH_AREA_CODE,r_research.UPDATE_TIMESTAMP,LOWER(r_research.UPDATE_USER),li_ver_nbr,SYS_GUID());

SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_RESEARCH_AREAS(ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,RESEARCH_AREA_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM PROTOCOL_RESEARCH_AREAS WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_RESEARCH_AREAS WHERE PROTOCOL_NUMBER=as_proto_num);
END LOOP;
END IF;

END LOOP;
CLOSE c_research;



ELSIF as_flag='NOTEPAD' THEN
IF c_notepad%ISOPEN THEN
CLOSE c_notepad;
END IF;
OPEN c_notepad(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_notepad INTO r_notepad;
EXIT WHEN c_notepad%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_notepad_id FROM DUAL;
SELECT (as_proto_num||'-'||SUBSTRB(r_notepad.COMMENTS,1,10)) INTO ls_note_type FROM DUAL;
SELECT to_char(r_notepad.COMMENTS) INTO ll_comments FROM DUAL;

li_seq:=as_sequence;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_NOTEPAD(PROTOCOL_NOTEPAD_ID,PROTOCOL_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ENTRY_NUMBER,COMMENTS,RESTRICTED_VIEW,NOTE_TYPE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
VALUES(li_notepad_id,li_protocol_id,as_proto_num,li_seq,r_notepad.ENTRY_NUMBER,ll_comments,r_notepad.RESTRICTED_VIEW,ls_note_type,li_ver_nbr,r_notepad.UPDATE_TIMESTAMP,LOWER(r_notepad.UPDATE_USER),SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_NOTEPAD(procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;



begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;


IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_NOTEPAD(PROTOCOL_NOTEPAD_ID,PROTOCOL_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ENTRY_NUMBER,COMMENTS,RESTRICTED_VIEW,NOTE_TYPE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,ENTRY_NUMBER,COMMENTS,RESTRICTED_VIEW,NOTE_TYPE,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,SYS_GUID() FROM PROTOCOL_NOTEPAD WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_NOTEPAD WHERE PROTOCOL_NUMBER=as_proto_num);
END LOOP;
END IF;

END LOOP;
CLOSE c_notepad;

ELSIF as_flag='PERSONS' THEN
IF c_person%ISOPEN THEN
CLOSE c_person;
END IF;
OPEN c_person(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_person INTO r_person;
EXIT WHEN c_person%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_proto_person_id FROM DUAL;

li_rolodex_id:=null;
ls_person_id:=null;

IF  r_person.NON_EMPLOYEE_FLAG='Y' THEN
select count(rolodex_id) into li_rolodex_count from ROLODEX where to_char(rolodex_id)=r_person.PERSON_ID;
if li_rolodex_count>0 then
li_rolodex_id:=r_person.PERSON_ID;
ls_person_id:=null;
ls_full_name:=r_person.PERSON_NAME;
else     
ls_person_id:=r_person.PERSON_ID;
li_rolodex_id:=null;

end if;
ELSE     
ls_full_name:=r_person.PERSON_NAME;     
ls_person_id:=r_person.PERSON_ID;

END IF;
li_seq:=as_sequence;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_PERSONS(PROTOCOL_PERSON_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME)
VALUES(li_proto_person_id,li_protocol_id,as_proto_num,li_seq,ls_person_id,r_person.PERSON_NAME,r_person.ROLE_ID,li_rolodex_id,r_person.AFFILIATION_TYPE_CODE,r_person.UPDATE_TIMESTAMP,LOWER(r_person.UPDATE_USER),li_ver_nbr,SYS_GUID(),NULL,r_person.SSN,r_person.LAST_NAME,r_person.FIRST_NAME,r_person.MIDDLE_NAME,r_person.PERSON_NAME,r_person.PRIOR_NAME,r_person.USER_NAME,r_person.EMAIL_ADDRESS,r_person.DATE_OF_BIRTH,r_person.AGE,r_person.AGE_BY_FISCAL_YEAR,r_person.GENDER,r_person.RACE,r_person.EDUCATION_LEVEL,r_person.DEGREE,r_person.MAJOR,r_person.IS_HANDICAPPED,r_person.HANDICAP_TYPE,r_person.IS_VETERAN,r_person.VETERAN_TYPE,r_person.VISA_CODE,r_person.VISA_TYPE,r_person.VISA_RENEWAL_DATE,r_person.HAS_VISA,r_person.OFFICE_LOCATION,r_person.OFFICE_PHONE,r_person.SECONDRY_OFFICE_LOCATION,r_person.SECONDRY_OFFICE_PHONE,r_person.SCHOOL,r_person.YEAR_GRADUATED,r_person.DIRECTORY_DEPARTMENT,r_person.SALUTATION,r_person.COUNTRY_OF_CITIZENSHIP,r_person.PRIMARY_TITLE,r_person.DIRECTORY_TITLE,r_person.HOME_UNIT,r_person.IS_FACULTY,r_person.IS_GRADUATE_STUDENT_STAFF,r_person.IS_RESEARCH_STAFF,r_person.IS_SERVICE_STAFF,r_person.IS_SUPPORT_STAFF,r_person.IS_OTHER_ACCADEMIC_GROUP,r_person.IS_MEDICAL_STAFF,r_person.VACATION_ACCURAL,r_person.IS_ON_SABBATICAL,r_person.ID_PROVIDED,r_person.ID_VERIFIED,r_person.ADDRESS_LINE_1,r_person.ADDRESS_LINE_2,r_person.ADDRESS_LINE_3,r_person.CITY,r_person.COUNTY,r_person.STATE,r_person.POSTAL_CODE,r_person.COUNTRY_CODE,r_person.FAX_NUMBER,r_person.PAGER_NUMBER,r_person.MOBILE_PHONE_NUMBER,r_person.ERA_COMMONS_USER_NAME);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_PERSONS(procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;

begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
IF li_count>0 THEN
FOR li_num in 1..li_count
LOOP
li_sequence:=li_seq;
li_seq:=li_seq+1;

SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_PERSONS(PROTOCOL_PERSON_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME FROM PROTOCOL_PERSONS WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=li_sequence AND  PROTOCOL_PERSON_ID=(SELECT MAX(PROTOCOL_PERSON_ID) FROM PROTOCOL_PERSONS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_sequence);

END LOOP;
END IF;
END IF;

END LOOP;
CLOSE c_person;

ELSIF as_flag='REVIEWERS' THEN
IF c_reviewers%ISOPEN THEN
CLOSE c_reviewers;
END IF;
OPEN c_reviewers(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_reviewers INTO r_reviewers;
EXIT WHEN c_reviewers%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_reviewers_id FROM DUAL;


li_rolodex_id:=null;
ls_person_id:=null;

IF  r_reviewers.NON_EMPLOYEE_FLAG='Y' THEN
select count(rolodex_id) into li_rolodex_count from ROLODEX where to_char(rolodex_id)=r_reviewers.PERSON_ID;
if li_rolodex_count>0 then
li_rolodex_id:=r_reviewers.PERSON_ID;
ls_person_id:=null;
else     
ls_person_id:=r_reviewers.PERSON_ID;
li_rolodex_id:=null;

end if;
ELSE     
ls_person_id:=r_reviewers.PERSON_ID;

END IF;

IF ls_number IS NULL THEN
ls_number:=r_reviewers.PROTOCOL_NUMBER;
li_seq:=as_sequence;
ELSIF ls_number!=r_reviewers.PROTOCOL_NUMBER THEN
ls_number:=r_reviewers.PROTOCOL_NUMBER;
li_seq:=as_sequence;
END IF;
--dbms_output.put_line('PROTOCOL_NUMBER13:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SEQUENCE:'||li_seq);

IF li_seq>0 THEN
IF li_submission IS NOT NULL THEN
IF li_submission=r_reviewers.SUBMISSION_NUMBER THEN
li_seq:=as_sequence;
END IF;
END IF;
END IF;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_reviewers.SUBMISSION_NUMBER;
INSERT INTO PROTOCOL_REVIEWERS(PROTOCOL_REVIEWER_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PERSON_ID,NON_EMPLOYEE_FLAG,REVIEWER_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,ROLODEX_ID)
VALUES(li_reviewers_id,li_protocol_id,li_submission_id,as_proto_num,li_seq,r_reviewers.SUBMISSION_NUMBER,ls_person_id,r_reviewers.NON_EMPLOYEE_FLAG,r_reviewers.REVIEWER_TYPE_CODE,r_reviewers.UPDATE_TIMESTAMP,LOWER(r_reviewers.UPDATE_USER),li_ver_nbr,SYS_GUID(),li_rolodex_id);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_REVIEWERS(procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;

begin
SELECT SUBMISSION_STATUS_CODE INTO ls_submission_status FROM OSP$PROTOCOL_SUBMISSION@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence AND SUBMISSION_NUMBER=r_reviewers.SUBMISSION_NUMBER;
exception
when others then
ls_submission_status := null;
end;

IF ls_submission_status=202 OR ls_submission_status=201 THEN
li_seq:=li_seq+1;
li_seq_number:=li_seq-1;
begin
select SUBMISSION_NUMBER INTO li_submission FROM PROTOCOL_REVIEWERS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq_number AND PERSON_ID=ls_person_id AND SUBMISSION_NUMBER=r_reviewers.SUBMISSION_NUMBER ;
exception
when others then
dbms_output.put_line('PROTOCOL_NUMBER13:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SEQUENCE:'||li_seq);
end;
--dbms_output.put_line('PROTOCOL_NUMBER12:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SEQUENCE:'||li_seq);

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('PROTOCOL_NUMBER12:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SEQUENCE:'||li_seq);
end;
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_reviewers.SUBMISSION_NUMBER;
INSERT INTO PROTOCOL_REVIEWERS(PROTOCOL_REVIEWER_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PERSON_ID,NON_EMPLOYEE_FLAG,REVIEWER_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,ROLODEX_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,li_submission_id,PROTOCOL_NUMBER,li_seq,SUBMISSION_NUMBER,PERSON_ID,NON_EMPLOYEE_FLAG,REVIEWER_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),ROLODEX_ID FROM PROTOCOL_REVIEWERS WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_REVIEWERS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq );

END IF;

END LOOP;
CLOSE c_reviewers;

ELSIF as_flag='UNITS' THEN
IF c_units%ISOPEN THEN
CLOSE c_units;
END IF;
OPEN c_units(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_units INTO r_units;
EXIT WHEN c_units%NOTFOUND;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_units_id FROM DUAL;



li_seq:=as_sequence;
li_rolodex_id:=null;
ls_person_id:=r_units.PERSON_ID;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT PROTOCOL_PERSON_ID INTO li_protocol_person_id FROM PROTOCOL_PERSONS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND PROTOCOL_ID=li_protocol_id AND (PERSON_ID=ls_person_id OR ROLODEX_ID=ls_person_id) AND (PROTOCOL_PERSON_ROLE_ID='PI' OR PROTOCOL_PERSON_ROLE_ID='COI');
INSERT INTO PROTOCOL_UNITS(PROTOCOL_UNITS_ID,PROTOCOL_PERSON_ID,VER_NBR,PROTOCOL_NUMBER,SEQUENCE_NUMBER,UNIT_NUMBER,LEAD_UNIT_FLAG,PERSON_ID,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
VALUES(li_protocol_units_id,li_protocol_person_id,li_ver_nbr,as_proto_num,li_seq,r_units.UNIT_NUMBER,r_units.LEAD_UNIT_FLAG,ls_person_id,r_units.UPDATE_TIMESTAMP,LOWER(r_units.UPDATE_USER),SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_UNITS(procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;


begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
if li_count>0 then
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
begin 
SELECT PROTOCOL_PERSON_ID INTO li_protocol_person_id FROM PROTOCOL_PERSONS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND (PERSON_ID=ls_person_id OR ROLODEX_ID=ls_person_id) AND (PROTOCOL_PERSON_ROLE_ID='PI' OR PROTOCOL_PERSON_ROLE_ID='COI');
exception
when others  then
dbms_output.put_line('PROTOCOL_NUMBER: '||as_proto_num||' SEQUENCE_NUMBER: '||li_seq||' PROTOCOL_ID: '||li_protocol_id||' PERSON_ID: '||ls_person_id||'  '||sqlerrm);
end;
INSERT INTO PROTOCOL_UNITS(PROTOCOL_UNITS_ID,PROTOCOL_PERSON_ID,VER_NBR,PROTOCOL_NUMBER,SEQUENCE_NUMBER,UNIT_NUMBER,LEAD_UNIT_FLAG,PERSON_ID,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_person_id,VER_NBR,PROTOCOL_NUMBER,li_seq,UNIT_NUMBER,LEAD_UNIT_FLAG,PERSON_ID,UPDATE_TIMESTAMP,UPDATE_USER,SYS_GUID() FROM PROTOCOL_UNITS WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_UNITS WHERE PROTOCOL_NUMBER=as_proto_num);
END LOOP;
END if;
END IF;

END LOOP;
CLOSE c_units;
ELSIF as_flag='ACTIONS' THEN
IF c_action%ISOPEN THEN
CLOSE c_action;
END IF;
OPEN c_action(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_action INTO r_action;
EXIT WHEN c_action%NOTFOUND;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_action_id FROM DUAL;
begin
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_sequence;
exception
when no_data_found  then

dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER4:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
end;

begin
select SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_sequence AND SUBMISSION_NUMBER=r_action.SUBMISSION_NUMBER ;
exception
when no_data_found then
li_submission_id:=NULL;
end;
--SELECT MAX(SEQUENCE_NUMBER) INTO li_sequence_num FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=as_proto_num;
IF ls_number IS NULL THEN
ls_number:=r_action.PROTOCOL_NUMBER;
li_sequence_num:=as_sequence;
ELSIF ls_number!=r_action.PROTOCOL_NUMBER THEN
ls_number:=r_action.PROTOCOL_NUMBER;
li_sequence_num:=as_sequence;
END IF;

begin
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_sequence_num;
exception
when no_data_found  then
dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER3:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
end;


begin
INSERT INTO PROTOCOL_ACTIONS(PROTOCOL_ACTION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,PROTOCOL_ID,SUBMISSION_ID_FK,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,OBJ_ID,PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE)
VALUES(li_protocol_action_id,as_proto_num,li_sequence_num,r_action.SUBMISSION_NUMBER,r_action.ACTION_ID,r_action.PROTOCOL_ACTION_TYPE_CODE,li_protocol_id,li_submission_id,r_action.COMMENTS,r_action.ACTION_DATE,r_action.UPDATE_TIMESTAMP,LOWER(r_action.UPDATE_USER),li_ver_nbr,r_action.ACTION_DATE,SYS_GUID(),NULL,NULL,NULL,NULL);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER2:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'ACTION_ID:'||r_action.ACTION_ID||'-'||sqlerrm);
end;

IF r_action.SUBMISSION_NUMBER IS NOT NULL THEN
--select min(SUBMISSION_NUMBER) into li_submission from OSP$PROTOCOL_SUBMISSION@coeus.kuali where PROTOCOL_NUMBER=as_proto_num   and SEQUENCE_NUMBER=as_coeus_sequence and SUBMISSION_NUMBER>r_action.SUBMISSION_NUMBER;
select min(SEQUENCE_NUMBER) into li_sequence_number from PROTOCOL_SUBMISSION where PROTOCOL_NUMBER=as_proto_num and SUBMISSION_NUMBER=r_action.SUBMISSION_NUMBER AND SEQUENCE_NUMBER>li_sequence_num;
END IF;
-- IF   li_submission IS NOT NULL THEN
IF li_sequence_number>0 THEN
IF r_action.PROTOCOL_ACTION_TYPE_CODE=202 OR  r_action.PROTOCOL_ACTION_TYPE_CODE=203  THEN
li_sequence_num:=li_sequence_num+1;

--begin
--SELECT MIN(SEQUENCE_NUMBER) into li_sequence_num FROM PROTOCOL  WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER>li_sequence_num;
--exception
--when no_data_found then

--dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER3:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
--end;
li_seq_number:=li_sequence_num-1;
begin
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_sequence_num;
exception
when no_data_found  then
dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER3 (procedure[proc_ammendment_child]):'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
end;
--select SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_sequence_num;
INSERT INTO PROTOCOL_ACTIONS(PROTOCOL_ACTION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,PROTOCOL_ID,SUBMISSION_ID_FK,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,OBJ_ID,PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,li_protocol_id,NULL,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,SYS_GUID(),PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=as_proto_num AND
PROTOCOL_ID=(SELECT MAX(PROTOCOL_ID) FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=as_proto_num AND PROTOCOL_ID<li_protocol_id AND SEQUENCE_NUMBER=li_seq_number );
--SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_sequence_num );
END IF;
END IF;
END LOOP;
CLOSE c_action;

ELSIF as_flag='REVIEW' THEN
IF c_special_review%ISOPEN THEN
CLOSE c_special_review;
END IF;
OPEN c_special_review(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_special_review INTO r_special_review;
EXIT WHEN c_special_review%NOTFOUND;


SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_special_review_id FROM DUAL;
BEGIN
l_tmp:=r_special_review.COMMENTS;
SELECT to_char(l_tmp) INTO ls_comment FROM DUAL;
EXCEPTION
WHEN OTHERS THEN
ls_comment:=NULL;
END;

li_seq:=as_sequence;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_SPECIAL_REVIEW(PROTOCOL_SPECIAL_REVIEW_ID,PROTOCOL_ID,VER_NBR,SPECIAL_REVIEW_NUMBER,SPECIAL_REVIEW_CODE,APPROVAL_TYPE_CODE,PROTOCOL_NUMBER,APPLICATION_DATE,APPROVAL_DATE,EXPIRATION_DATE,COMMENTS,UPDATE_USER,UPDATE_TIMESTAMP,OBJ_ID)
VALUES(li_protocol_special_review_id,li_protocol_id,li_ver_nbr,r_special_review.SPECIAL_REVIEW_NUMBER,r_special_review.SPECIAL_REVIEW_CODE,r_special_review.APPROVAL_TYPE_CODE,r_special_review.PROTOCOL_NUMBER,r_special_review.APPLICATION_DATE,r_special_review.APPROVAL_DATE,NULL,ls_comment,LOWER(r_special_review.UPDATE_USER),r_special_review.UPDATE_TIMESTAMP,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_SPECIAL_REVIEW (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;

begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_SPECIAL_REVIEW(PROTOCOL_SPECIAL_REVIEW_ID,PROTOCOL_ID,VER_NBR,SPECIAL_REVIEW_NUMBER,SPECIAL_REVIEW_CODE,APPROVAL_TYPE_CODE,PROTOCOL_NUMBER,APPLICATION_DATE,APPROVAL_DATE,EXPIRATION_DATE,COMMENTS,UPDATE_USER,UPDATE_TIMESTAMP,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,VER_NBR,SPECIAL_REVIEW_NUMBER,SPECIAL_REVIEW_CODE,APPROVAL_TYPE_CODE,PROTOCOL_NUMBER,APPLICATION_DATE,APPROVAL_DATE,EXPIRATION_DATE,COMMENTS,UPDATE_USER,UPDATE_TIMESTAMP,SYS_GUID() FROM  PROTOCOL_SPECIAL_REVIEW  WHERE PROTOCOL_NUMBER=as_proto_num AND
PROTOCOL_ID=(SELECT PROTOCOL_ID FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_sequence);
END LOOP;
END IF;

END LOOP;
CLOSE c_special_review;

ELSIF as_flag='VULNERABLE' THEN
IF c_vulnerable_subject%ISOPEN THEN
CLOSE c_vulnerable_subject;
END IF;
OPEN c_vulnerable_subject(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_vulnerable_subject INTO r_vulnerable_subject;
EXIT WHEN c_vulnerable_subject%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_vulnerable_id FROM DUAL;

li_seq:=as_sequence;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_VULNERABLE_SUB(PROTOCOL_VULNERABLE_SUB_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,VULNERABLE_SUBJECT_TYPE_CODE,SUBJECT_COUNT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_vulnerable_id,li_protocol_id,as_proto_num,li_seq,r_vulnerable_subject.VULNERABLE_SUBJECT_TYPE_CODE,r_vulnerable_subject.SUBJECT_COUNT,r_vulnerable_subject.UPDATE_TIMESTAMP,LOWER(r_vulnerable_subject.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_VULNERABLE_SUB (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;

begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_VULNERABLE_SUB(PROTOCOL_VULNERABLE_SUB_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,VULNERABLE_SUBJECT_TYPE_CODE,SUBJECT_COUNT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,VULNERABLE_SUBJECT_TYPE_CODE,SUBJECT_COUNT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM PROTOCOL_VULNERABLE_SUB WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_VULNERABLE_SUB WHERE  PROTOCOL_NUMBER=as_proto_num);
END LOOP;

END IF;

END LOOP;
CLOSE c_vulnerable_subject;

ELSIF as_flag='KEYPERSON' THEN
IF c_key_person%ISOPEN THEN
CLOSE c_key_person;
END IF;
OPEN c_key_person(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_key_person INTO r_key_person;
EXIT WHEN c_key_person%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_person_id FROM DUAL;
begin
		 SELECT COUNT(ROLODEX_ID) INTO li_rolodex_count FROM ROLODEX WHERE to_char(ROLODEX_ID)=r_key_person.PERSON_ID;
		 if li_rolodex_count>0 then
		   li_rolodex_id:=r_key_person.PERSON_ID;
		   ls_person_id:=null;
		 else
			
		   ls_person_id:=r_key_person.PERSON_ID;                   
		   li_rolodex_id:=null;
		 end if;
		 exception when others then                  
		   ls_person_id:=r_key_person.PERSON_ID;                  
		   li_rolodex_id:=null;
		 end;

   li_seq:=as_sequence;
begin   
    SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	INSERT INTO PROTOCOL_PERSONS(PROTOCOL_PERSON_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME)
	VALUES(li_protocol_person_id,li_protocol_id,as_proto_num,li_seq,ls_person_id,r_key_person.PERSON_NAME,'SP',li_rolodex_id,r_key_person.AFFILIATION_TYPE_CODE,r_key_person.UPDATE_TIMESTAMP,LOWER(r_key_person.UPDATE_USER),li_ver_nbr,SYS_GUID(),NULL,r_key_person.SSN,r_key_person.LAST_NAME,r_key_person.FIRST_NAME,r_key_person.MIDDLE_NAME,r_key_person.PERSON_NAME,r_key_person.PRIOR_NAME,r_key_person.USER_NAME,r_key_person.EMAIL_ADDRESS,r_key_person.DATE_OF_BIRTH,r_key_person.AGE,r_key_person.AGE_BY_FISCAL_YEAR,r_key_person.GENDER,r_key_person.RACE,r_key_person.EDUCATION_LEVEL,r_key_person.DEGREE,r_key_person.MAJOR,r_key_person.IS_HANDICAPPED,r_key_person.HANDICAP_TYPE,r_key_person.IS_VETERAN,r_key_person.VETERAN_TYPE,r_key_person.VISA_CODE,r_key_person.VISA_TYPE,r_key_person.VISA_RENEWAL_DATE,r_key_person.HAS_VISA,r_key_person.OFFICE_LOCATION,r_key_person.OFFICE_PHONE,r_key_person.SECONDRY_OFFICE_LOCATION,r_key_person.SECONDRY_OFFICE_PHONE,r_key_person.SCHOOL,r_key_person.YEAR_GRADUATED,r_key_person.DIRECTORY_DEPARTMENT,r_key_person.SALUTATION,r_key_person.COUNTRY_OF_CITIZENSHIP,r_key_person.PRIMARY_TITLE,r_key_person.DIRECTORY_TITLE,r_key_person.HOME_UNIT,r_key_person.IS_FACULTY,r_key_person.IS_GRADUATE_STUDENT_STAFF,r_key_person.IS_RESEARCH_STAFF,r_key_person.IS_SERVICE_STAFF,r_key_person.IS_SUPPORT_STAFF,r_key_person.IS_OTHER_ACCADEMIC_GROUP,r_key_person.IS_MEDICAL_STAFF,r_key_person.VACATION_ACCURAL,r_key_person.IS_ON_SABBATICAL,r_key_person.ID_PROVIDED,r_key_person.ID_VERIFIED,r_key_person.ADDRESS_LINE_1,r_key_person.ADDRESS_LINE_2,r_key_person.ADDRESS_LINE_3,r_key_person.CITY,r_key_person.COUNTY,r_key_person.STATE,r_key_person.POSTAL_CODE,r_key_person.COUNTRY_CODE,r_key_person.FAX_NUMBER,r_key_person.PAGER_NUMBER,r_key_person.MOBILE_PHONE_NUMBER,r_key_person.ERA_COMMONS_USER_NAME);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_PERSONS (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end; 
begin
	SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

	IF ls_proto_status=102 OR ls_proto_status=104 THEN
	SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
	 li_count:=li_count-1;
	 FOR li_num in 1..li_count
	 LOOP
	 li_seq:=li_seq+1;
	  SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	  INSERT INTO PROTOCOL_PERSONS(PROTOCOL_PERSON_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME)
	  SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,PERSON_ID,PERSON_NAME,PROTOCOL_PERSON_ROLE_ID,ROLODEX_ID,AFFILIATION_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,COMMENTS,SSN,LAST_NAME,FIRST_NAME,MIDDLE_NAME,FULL_NAME,PRIOR_NAME,USER_NAME,EMAIL_ADDRESS,DATE_OF_BIRTH,AGE,AGE_BY_FISCAL_YEAR,GENDER,RACE,EDUCATION_LEVEL,DEGREE,MAJOR,IS_HANDICAPPED,HANDICAP_TYPE,IS_VETERAN,VETERAN_TYPE,VISA_CODE,VISA_TYPE,VISA_RENEWAL_DATE,HAS_VISA,OFFICE_LOCATION,OFFICE_PHONE,SECONDRY_OFFICE_LOCATION,SECONDRY_OFFICE_PHONE,SCHOOL,YEAR_GRADUATED,DIRECTORY_DEPARTMENT,SALUTATION,COUNTRY_OF_CITIZENSHIP,PRIMARY_TITLE,DIRECTORY_TITLE,HOME_UNIT,IS_FACULTY,IS_GRADUATE_STUDENT_STAFF,IS_RESEARCH_STAFF,IS_SERVICE_STAFF,IS_SUPPORT_STAFF,IS_OTHER_ACCADEMIC_GROUP,IS_MEDICAL_STAFF,VACATION_ACCURAL,IS_ON_SABBATICAL,ID_PROVIDED,ID_VERIFIED,ADDRESS_LINE_1,ADDRESS_LINE_2,ADDRESS_LINE_3,CITY,COUNTY,STATE,POSTAL_CODE,COUNTRY_CODE,FAX_NUMBER,PAGER_NUMBER,MOBILE_PHONE_NUMBER,ERA_COMMONS_USER_NAME FROM PROTOCOL_PERSONS WHERE PROTOCOL_NUMBER=as_proto_num AND
	  SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_PERSONS WHERE  PROTOCOL_NUMBER=as_proto_num);
	  END LOOP;

   END IF;

END LOOP;
CLOSE c_key_person;

ELSIF as_flag='FUNDING' THEN
IF c_funding%ISOPEN THEN
CLOSE c_funding;
END IF;
OPEN c_funding(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_funding INTO r_funding;
EXIT WHEN c_funding%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_funding_id FROM DUAL;
IF r_funding.FUNDING_SOURCE_TYPE_CODE=6 THEN   --6-FOR AWARD
SELECT FN_AWARD_NUMBER(r_funding.FUNDING_SOURCE) INTO ls_funding_source FROM DUAL;
ELSE
ls_funding_source:=r_funding.FUNDING_SOURCE;
END IF;

li_seq:=as_sequence;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_FUNDING_SOURCE(PROTOCOL_FUNDING_SOURCE_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,FUNDING_SOURCE_TYPE_CODE,FUNDING_SOURCE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,FUNDING_SOURCE_NAME,OBJ_ID)
VALUES(li_protocol_funding_id,li_protocol_id,as_proto_num,li_seq,r_funding.FUNDING_SOURCE_TYPE_CODE,ls_funding_source,r_funding.UPDATE_TIMESTAMP,LOWER(r_funding.UPDATE_USER),li_ver_nbr,NULL,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_FUNDING_SOURCE (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;

begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_FUNDING_SOURCE(PROTOCOL_FUNDING_SOURCE_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,FUNDING_SOURCE_TYPE_CODE,FUNDING_SOURCE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,FUNDING_SOURCE_NAME,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,FUNDING_SOURCE_TYPE_CODE,FUNDING_SOURCE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,FUNDING_SOURCE_NAME,SYS_GUID() FROM PROTOCOL_FUNDING_SOURCE WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_FUNDING_SOURCE WHERE  PROTOCOL_NUMBER=as_proto_num);

END LOOP;

END IF;


END LOOP;
CLOSE c_funding;

ELSIF as_flag='CORRESPONDENT' THEN
IF c_correspondent%ISOPEN THEN
CLOSE c_correspondent;
END IF;
OPEN c_correspondent(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_correspondent INTO r_correspondent;
EXIT WHEN c_correspondent%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_correspondence_id FROM DUAL;


IF ls_number IS NULL THEN
ls_number:=r_correspondent.PROTOCOL_NUMBER;
li_seq:=as_sequence;
ELSIF ls_number!=r_correspondent.PROTOCOL_NUMBER THEN
ls_number:=r_correspondent.PROTOCOL_NUMBER;
li_seq:=as_sequence;
END IF;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
li_protocol_id := null;
end;

begin
SELECT PROTOCOL_ACTION_ID INTO li_protocol_action_id FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND ACTION_ID=r_correspondent.ACTION_ID AND PROTOCOL_ID=li_protocol_id ;
exception
when others then
dbms_output.put_line('PROTOCOL_NUMBER3:'||as_proto_num||'SEQUENCE_NUMBER:'||li_seq||'PROTOCOL_ID:'||li_protocol_id||'ACTION_ID:'||r_correspondent.ACTION_ID);
end;

--SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_CORRESPONDENCE(ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTOCOL_ID,ACTION_ID_FK,PROTO_CORRESP_TYPE_CODE,FINAL_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,CORRESPONDENCE,OBJ_ID,CREATE_TIMESTAMP,CREATE_USER,FINAL_FLAG_TIMESTAMP)
VALUES(li_correspondence_id,as_proto_num,li_seq,r_correspondent.ACTION_ID,li_protocol_id,li_protocol_action_id,r_correspondent.PROTO_CORRESP_TYPE_CODE,r_correspondent.FINAL_FLAG,r_correspondent.UPDATE_TIMESTAMP,LOWER(r_correspondent.UPDATE_USER),li_ver_nbr,r_correspondent.CORRESPONDENCE,SYS_GUID(),null,null,null);

begin
SELECT PROTOCOL_ACTION_TYPE_CODE INTO ls_proto_action_type FROM OSP$PROTOCOL_ACTIONS@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence AND ACTION_ID=r_correspondent.ACTION_ID;
exception
when others then
ls_proto_action_type := null;
end;

IF ls_proto_action_type=202 OR ls_proto_action_type=203 THEN
li_seq:=li_seq+1;
END IF;


END LOOP;
CLOSE c_correspondent;

ELSIF as_flag='REFFERRENCE' THEN
IF c_refference%ISOPEN THEN
CLOSE c_refference;
END IF;
OPEN c_refference(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_refference INTO r_refference;
EXIT WHEN c_refference%NOTFOUND;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_refference_id FROM DUAL;
BEGIN
l_tmp:=r_refference.COMMENTS;
SELECT to_char(l_tmp) INTO ls_comment FROM DUAL;
EXCEPTION
WHEN OTHERS THEN
ls_comment:=NULL;
END;

	li_seq:=as_sequence;
	begin
	SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	INSERT INTO PROTOCOL_REFERENCES(PROTOCOL_REFERENCE_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_REFERENCE_NUMBER,PROTOCOL_REFERENCE_TYPE_CODE,REFERENCE_KEY,APPLICATION_DATE,APPROVAL_DATE,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
	VALUES(li_protocol_refference_id,li_protocol_id,as_proto_num,li_seq,r_refference.PROTOCOL_REFERENCE_NUMBER,r_refference.PROTOCOL_REFERENCE_TYPE_CODE,r_refference.REFERENCE_KEY,r_refference.APPLICATION_DATE,r_refference.APPROVAL_DATE,ls_comment,r_refference.UPDATE_TIMESTAMP,LOWER(r_refference.UPDATE_USER),li_ver_nbr,SYS_GUID());
	exception
	when others then
	dbms_output.put_line('ERROR IN PROTOCOL_REFERENCES (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
	end;
	
	begin
	SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
	exception
	when others then
	ls_proto_status := null;
	end;
IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;
	begin
	SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	INSERT INTO PROTOCOL_REFERENCES(PROTOCOL_REFERENCE_ID,PROTOCOL_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,PROTOCOL_REFERENCE_NUMBER,PROTOCOL_REFERENCE_TYPE_CODE,REFERENCE_KEY,APPLICATION_DATE,APPROVAL_DATE,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
	SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,PROTOCOL_REFERENCE_NUMBER,PROTOCOL_REFERENCE_TYPE_CODE,REFERENCE_KEY,APPLICATION_DATE,APPROVAL_DATE,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM PROTOCOL_REFERENCES WHERE PROTOCOL_NUMBER=as_proto_num AND
	SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_REFERENCES WHERE PROTOCOL_NUMBER=as_proto_num);
	exception
	when others then
	dbms_output.put_line('ERROR IN PROTOCOL_REFERENCES (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
	end;

END LOOP;

END IF;


END LOOP;
CLOSE c_refference;

ELSIF as_flag='RISKLEVEL' THEN
IF c_risk_level%ISOPEN THEN
CLOSE c_risk_level;
END IF;
OPEN c_risk_level(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_risk_level INTO r_risk_level;
EXIT WHEN c_risk_level%NOTFOUND;
li_seq:=as_sequence;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_risk_level_id FROM DUAL;
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;

begin
INSERT INTO PROTOCOL_RISK_LEVELS(PROTOCOL_RISK_LEVELS_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,RISK_LEVEL_CODE,COMMENTS,DATE_ASSIGNED,DATE_INACTIVATED,STATUS,UPDATE_USER,UPDATE_TIMESTAMP,PROTOCOL_ID,VER_NBR,OBJ_ID)
VALUES(li_risk_level_id,as_proto_num,li_seq,r_risk_level.RISK_LEVEL_CODE,r_risk_level.COMMENTS,r_risk_level.DATE_ASSIGNED,NULL,r_risk_level.STATUS,LOWER(r_risk_level.UPDATE_USER),r_risk_level.UPDATE_TIMESTAMP,li_protocol_id,li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_RISK_LEVELS,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
end;

begin
SELECT PROTOCOL_STATUS_CODE INTO ls_proto_status FROM OSP$PROTOCOL@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence;
exception
when others then
ls_proto_status := null;
end;

IF ls_proto_status=102 OR ls_proto_status=104 THEN
SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;

	begin
	SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	INSERT INTO PROTOCOL_RISK_LEVELS(PROTOCOL_RISK_LEVELS_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,RISK_LEVEL_CODE,COMMENTS,DATE_ASSIGNED,DATE_INACTIVATED,STATUS,UPDATE_USER,UPDATE_TIMESTAMP,PROTOCOL_ID,VER_NBR,OBJ_ID)
	SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,li_seq,RISK_LEVEL_CODE,COMMENTS,DATE_ASSIGNED,DATE_INACTIVATED,STATUS,UPDATE_USER,UPDATE_TIMESTAMP,li_protocol_id,li_ver_nbr,SYS_GUID() FROM PROTOCOL_RISK_LEVELS WHERE PROTOCOL_NUMBER=as_proto_num AND
	SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_RISK_LEVELS WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq);
	exception
	when others then
	dbms_output.put_line('ERROR IN PROTOCOL_RISK_LEVELS (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
	end;

END LOOP;

END IF;


END LOOP;
CLOSE c_risk_level;

ELSIF as_flag='EXEMPT' THEN
IF c_exempt%ISOPEN THEN
CLOSE c_exempt;
END IF;
OPEN c_exempt(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_exempt INTO r_exempt;
EXIT WHEN c_exempt%NOTFOUND;
li_seq:=as_sequence;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_exempt_checklist_id FROM DUAL;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_exempt.SUBMISSION_NUMBER;
exception
when others then
li_protocol_id := null;
end;

begin
INSERT INTO PROTOCOL_EXEMPT_CHKLST(PROTOCOL_EXEMPT_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_exempt_checklist_id,li_protocol_id,li_submission_id,as_proto_num,li_seq,r_exempt.SUBMISSION_NUMBER,r_exempt.EXEMPT_STUDIES_CHECKLIST_CODE,r_exempt.UPDATE_TIMESTAMP,LOWER(r_exempt.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXEMPT_CHKLST,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SUBMISSION_NUMBER:'||r_exempt.SUBMISSION_NUMBER||'-'||sqlerrm);
end;


SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;

	begin
	SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
	SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_exempt.SUBMISSION_NUMBER;
	INSERT INTO PROTOCOL_EXEMPT_CHKLST(PROTOCOL_EXEMPT_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
	SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,li_submission_id,PROTOCOL_NUMBER,li_seq,r_exempt.SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM PROTOCOL_EXEMPT_CHKLST WHERE PROTOCOL_NUMBER=as_proto_num AND
	SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_EXEMPT_CHKLST WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq);
	exception
	when others then
	dbms_output.put_line('ERROR IN PROTOCOL_EXEMPT_CHKLST (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
	end;

END LOOP;

END LOOP;
CLOSE c_exempt;

ELSIF as_flag='EXPEDITED' THEN
IF c_expedited%ISOPEN THEN
CLOSE c_expedited;
END IF;
OPEN c_expedited(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_expedited INTO r_expedited;
EXIT WHEN c_expedited%NOTFOUND;


li_seq:=as_sequence;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_expedited_id FROM DUAL;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_expedited.SUBMISSION_NUMBER;
exception
when others then
li_protocol_id := null;
li_submission_id := null;
end;



begin
INSERT INTO PROTOCOL_EXPIDITED_CHKLST(PROTOCOL_EXPEDITED_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_expedited_id,li_protocol_id,li_submission_id,as_proto_num,li_seq,r_expedited.SUBMISSION_NUMBER,r_expedited.EXPEDITED_REV_CHKLST_CODE,r_expedited.UPDATE_TIMESTAMP,LOWER(r_expedited.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXPIDITED_CHKLST,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'SUBMISSION_NUMBER:'||r_expedited.SUBMISSION_NUMBER||'-'||sqlerrm);
end;



SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXPIDITED_CHKLST,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||li_seq);
end;

begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_expedited.SUBMISSION_NUMBER;
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXPIDITED_CHKLST,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_expedited.SUBMISSION_NUMBER);
end;

begin
INSERT INTO PROTOCOL_EXPIDITED_CHKLST(PROTOCOL_EXPEDITED_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,li_submission_id,PROTOCOL_NUMBER,li_seq,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM PROTOCOL_EXPIDITED_CHKLST WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_EXPIDITED_CHKLST WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXPIDITED_CHKLST (procedure[proc_ammendment_child]) '||sqlerrm);
end;


END LOOP;

END LOOP;
CLOSE c_expedited;

ELSIF as_flag='SUBMISSION DOC' THEN
IF c_doc%ISOPEN THEN
CLOSE c_doc;
END IF;
OPEN c_doc(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_doc INTO r_doc;
EXIT WHEN c_doc%NOTFOUND;

li_seq:=as_sequence;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_submission_doc_id FROM DUAL;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE  PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_doc.SUBMISSION_NUMBER;
exception
when others then
li_protocol_id := null;
li_submission_id := null;
end;

ls_content_type:=r_doc.MIME_TYPE;

if ls_content_type is null then
ls_content_type:=r_doc.FILE_NAME;
select REVERSE(substr( REVERSE(ls_content_type),1,(instr( REVERSE(ls_content_type),'.',1)-1))) into ls_content_type from dual;
if    ls_content_type='xls' or  ls_content_type='xlsx' then
	  ls_content_type:='application/excel';
elsif ls_content_type='doc' or  ls_content_type='docx' then
	  ls_content_type:='application/msword';
elsif ls_content_type='ppt' or  ls_content_type='pptx' then
	  ls_content_type:='application/powerpoint';
elsif ls_content_type='html'  then
	  ls_content_type:='text/html';
elsif ls_content_type='pdf'  then
	  ls_content_type:='application/pdf';
elsif ls_content_type='jpg' or ls_content_type='jpeg'  then
	  ls_content_type:='image/jpeg';
elsif ls_content_type='vsd' then
	  ls_content_type:='application/vnd.visio';
elsif ls_content_type='xml' then
	  ls_content_type:='application/xml';
elsif ls_content_type='png' then
	  ls_content_type:='image/png';
elsif ls_content_type='rtf' then
	  ls_content_type:='application/rtf';
else
	  ls_content_type:='other';
end if;

end if;


IF ls_number IS NULL THEN
ls_number:=r_doc.PROTOCOL_NUMBER;
li_seq:=as_sequence;
ELSIF ls_number!=r_doc.PROTOCOL_NUMBER THEN
ls_number:=r_doc.PROTOCOL_NUMBER;
li_seq:=as_sequence;
END IF;


begin
INSERT INTO PROTOCOL_SUBMISSION_DOC(SUBMISSION_DOC_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,DESCRIPTION,CONTENT_TYPE)
VALUES(li_submission_doc_id,as_proto_num,li_seq,r_doc.SUBMISSION_NUMBER,li_protocol_id,li_submission_id,r_doc.DOCUMENT_ID,r_doc.FILE_NAME,r_doc.DOCUMENT,r_doc.UPDATE_TIMESTAMP,LOWER(r_doc.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_doc.DESCRIPTION,ls_content_type);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_SUBMISSION_DOC,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||r_doc.SEQUENCE_NUMBER||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

begin
SELECT SUBMISSION_STATUS_CODE INTO ls_submission_status FROM OSP$PROTOCOL_SUBMISSION@coeus.kuali WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence AND SUBMISSION_NUMBER=r_exempt.SUBMISSION_NUMBER;
exception
when others then
ls_submission_status := null;
end;


IF ls_submission_status=202 OR ls_submission_status=201 THEN
SELECT MIN(SEQUENCE_NUMBER)INTO li_seq FROM PROTOCOL  WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER>li_seq;
SELECT MIN(SUBMISSION_NUMBER) INTO li_submission FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;

SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
--SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=li_submission;
INSERT INTO PROTOCOL_SUBMISSION_DOC(SUBMISSION_DOC_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,DESCRIPTION,CONTENT_TYPE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,li_seq,li_submission,li_protocol_id,null,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),DESCRIPTION,CONTENT_TYPE FROM PROTOCOL_SUBMISSION_DOC WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_SUBMISSION_DOC WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq);
END IF;

END LOOP;

CLOSE c_doc;

ELSIF as_flag='PROTOCOL ATTACHMENT' THEN
IF c_attach%ISOPEN THEN
CLOSE c_attach;
END IF;
OPEN c_attach(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_attach INTO r_attach;
li_seq:=as_sequence;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
li_protocol_id := null;
end;

ls_content_type:=r_attach.FILE_NAME;
select REVERSE(substr( REVERSE(ls_content_type),1,(instr( REVERSE(ls_content_type),'.',1)-1))) into ls_content_type from dual;
if    ls_content_type='xls' or  ls_content_type='xlsx' then
	  ls_content_type:='application/excel';
elsif ls_content_type='doc' or  ls_content_type='docx' then
	  ls_content_type:='application/msword';
elsif ls_content_type='ppt' or  ls_content_type='pptx' then
	  ls_content_type:='application/powerpoint';
elsif ls_content_type='html'  then
	  ls_content_type:='text/html';
elsif ls_content_type='pdf'  then
	  ls_content_type:='application/pdf';
elsif ls_content_type='jpg' or ls_content_type='jpeg'  then
	  ls_content_type:='image/jpeg';
elsif ls_content_type='vsd' then
	  ls_content_type:='application/vnd.visio';
elsif ls_content_type='xml' then
	  ls_content_type:='application/xml';
elsif ls_content_type='png' then
	  ls_content_type:='image/png';
elsif ls_content_type='rtf' then
	  ls_content_type:='application/rtf';
else
	  ls_content_type:='other';
end if;


select SEQ_ATTACHMENT_ID.NEXTVAL into li_file_id from dual;

begin
INSERT INTO ATTACHMENT_FILE(FILE_ID,SEQUENCE_NUMBER,FILE_NAME,CONTENT_TYPE,FILE_DATA,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID)
VALUES(li_file_id,li_seq,r_attach.FILE_NAME,ls_content_type,r_attach.DOCUMENT,li_ver_nbr,r_attach.UPDATE_TIMESTAMP,r_attach.UPDATE_USER,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN ATTACHMENT_FILE '||sqlerrm);
end;


begin
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_pa_id FROM DUAL;
INSERT INTO PROTOCOL_ATTACHMENT_PROTOCOL(PA_PROTOCOL_ID,PROTOCOL_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,TYPE_CD,DOCUMENT_ID,FILE_ID,DESCRIPTION,STATUS_CD,CONTACT_NAME,EMAIL_ADDRESS,PHONE_NUMBER,COMMENTS,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID,DOCUMENT_STATUS_CODE,CREATE_TIMESTAMP,ATTACHMENT_VERSION)
VALUES(li_pa_id,li_protocol_id,as_proto_num,li_seq,r_attach.DOCUMENT_TYPE_CODE,r_attach.DOCUMENT_ID,li_file_id,r_attach.DESCRIPTION,NULL,NULL,NULL,NULL,NULL,li_ver_nbr,r_attach.UPDATE_TIMESTAMP,LOWER(r_attach.UPDATE_USER),SYS_GUID(),r_attach.DOCUMENT_STATUS_CODE,r_attach.UPDATE_TIMESTAMP,r_attach.VERSION_NUMBER);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_ATTATCHMENT_PROTOCOL,PROTOCOL_NUMBER:'||as_proto_num||'SEQUENCE_NUMBER:'||as_coeus_sequence||'-'||sqlerrm);
end;


SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
li_count:=li_count-1;
FOR li_num in 1..li_count
LOOP
li_seq:=li_seq+1;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_ATTACHMENT_PROTOCOL(PA_PROTOCOL_ID,PROTOCOL_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,TYPE_CD,DOCUMENT_ID,FILE_ID,DESCRIPTION,STATUS_CD,CONTACT_NAME,EMAIL_ADDRESS,PHONE_NUMBER,COMMENTS,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,OBJ_ID,DOCUMENT_STATUS_CODE,CREATE_TIMESTAMP,ATTACHMENT_VERSION)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,li_protocol_id,PROTOCOL_NUMBER,li_seq,TYPE_CD,DOCUMENT_ID,FILE_ID,DESCRIPTION,STATUS_CD,CONTACT_NAME,EMAIL_ADDRESS,PHONE_NUMBER,COMMENTS,VER_NBR,UPDATE_TIMESTAMP,UPDATE_USER,SYS_GUID(),DOCUMENT_STATUS_CODE,CREATE_TIMESTAMP,ATTACHMENT_VERSION FROM PROTOCOL_ATTACHMENT_PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_ATTACHMENT_PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num AND SEQUENCE_NUMBER<li_seq);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_ATTACHMENT_PROTOCOL (procedure[proc_ammendment_child]) where Protocol_number,sequence_number is '||as_proto_num||' , '||li_seq||' error is '||sqlerrm);
end;


END LOOP;


END LOOP;
CLOSE c_attach;

ELSIF as_flag='SCHEDULE' THEN
IF c_minutes%ISOPEN THEN
CLOSE c_minutes;
END IF;
OPEN c_minutes(as_proto_num,as_coeus_sequence);
LOOP
FETCH c_minutes INTO r_minutes;
EXIT WHEN c_minutes%NOTFOUND;

IF ls_num IS NULL THEN
ls_num:=r_minutes.SUBMISSION_NUMBER;
ls_proto_num:=r_minutes.PROTOCOL_NUMBER;
li_seq:=0;
ELSIF ls_num!=r_minutes.SUBMISSION_NUMBER AND ls_proto_num=r_minutes.PROTOCOL_NUMBER THEN
li_seq:=li_seq+1;

ELSIF ls_num=r_minutes.SUBMISSION_NUMBER AND ls_proto_num=r_minutes.PROTOCOL_NUMBER THEN
li_seq:=0;

ELSIF ls_num!=r_minutes.SUBMISSION_NUMBER AND ls_proto_num!=r_minutes.PROTOCOL_NUMBER THEN
ls_proto_num:=r_minutes.PROTOCOL_NUMBER;
ls_num:=r_minutes.SUBMISSION_NUMBER;
li_seq:=0;
ELSIF ls_num=r_minutes.SUBMISSION_NUMBER AND ls_proto_num!=r_minutes.PROTOCOL_NUMBER THEN
ls_proto_num:=r_minutes.PROTOCOL_NUMBER;
ls_num:=r_minutes.SUBMISSION_NUMBER;
li_seq:=0;

END IF;

IF r_minutes.PERSON_ID IS NULL THEN
begin
SELECT PERSON_ID INTO ls_person FROM OSP$PROTOCOL_REVIEWERS@coeus.kuali WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=as_coeus_sequence AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER;
exception
when others then
ls_person_id:=null;
end;
ls_person_id:=r_minutes.PERSON_ID;
SELECT SEQ_MEETING_ID.NEXTVAL INTO li_schedule_minutes_id FROM DUAL;
begin
SELECT PROTOCOL_REVIEWER_ID INTO li_protocol_reviewer FROM PROTOCOL_REVIEWERS WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER AND PERSON_ID=ls_person_id;
exception
when others then
li_protocol_reviewer:=null;
end;
begin
SELECT ID INTO li_comm_schecule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_minutes.SCHEDULE_ID;
exception
when others then
dbms_output.put_line('SCHEDULE_ID3:'||r_minutes.SCHEDULE_ID);
end;
begin
SELECT COMM_SCHEDULE_ACT_ITEMS_ID INTO li_act_items_id FROM COMM_SCHEDULE_ACT_ITEMS WHERE SCHEDULE_ID_FK=li_comm_schecule_id;
exception
when others then
li_act_items_id:=null;
end;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
li_protocol_id:=null;
end;
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER;
exception
when others then
li_submission_id:=null;
end;
SELECT to_char(r_minutes.MINUTE_ENTRY) INTO ll_minute_entry FROM DUAL;

ls_contingency_code:=r_minutes.PROTOCOL_CONTINGENCY_CODE;
IF ls_contingency_code=100 OR ls_contingency_code=101 THEN
ls_contingency_code:=NULL;
ELSE
ls_contingency_code:=r_minutes.PROTOCOL_CONTINGENCY_CODE;
END IF;

begin
INSERT INTO COMM_SCHEDULE_MINUTES(COMM_SCHEDULE_MINUTES_ID,FINAL_FLAG,REVIEWER_ID_FK,SCHEDULE_ID_FK,PROTOCOL_ID_FK,ENTRY_NUMBER,MINUTE_ENTRY_TYPE_CODE,SUBMISSION_ID_FK,PRIVATE_COMMENT_FLAG,PROTOCOL_CONTINGENCY_CODE,MINUTE_ENTRY,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,PROTOCOL_ONLN_RVW_FK,COMM_SCHEDULE_ACT_ITEMS_ID_FK,CREATE_USER,CREATE_TIMESTAMP)
VALUES(li_schedule_minutes_id,r_minutes.FINAL_FLAG,li_protocol_reviewer,li_comm_schecule_id,li_protocol_id,r_minutes.ENTRY_NUMBER,r_minutes.MINUTE_ENTRY_TYPE_CODE,li_submission_id,r_minutes.PRIVATE_COMMENT_FLAG,r_minutes.PROTOCOL_CONTINGENCY_CODE,ll_minute_entry,r_minutes.UPDATE_TIMESTAMP,LOWER(r_minutes.UPDATE_USER),li_ver_nbr,SYS_GUID(),NULL,li_act_items_id,r_minutes.CREATE_USER,r_minutes.CREATE_TIMESTAMP);
exception
when others then
dbms_output.put_line('PROTOCOL_CONTINGENCY_CODE:'||r_minutes.PROTOCOL_CONTINGENCY_CODE||'AND'||'SCHEDULE_ID:'||r_minutes.SCHEDULE_ID||'NOT IN PARENT TABLE');
end;
--added because of error
end if;
--
END LOOP;
CLOSE c_minutes;
END IF;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_submission_id NUMBER(12,0);
li_seq NUMBER(4,0);
li_protocol_id NUMBER(12,0);
li_committee_id NUMBER(12,0);
li_comm_schedule_id NUMBER(12,0);
li_sequence NUMBER(4,0);
li_recused_count NUMBER(3,0):=NULL;
ls_is_billable VARCHAR2(1):='N';
ls_comm_decision_motion VARCHAR2(3);
li_sequence_num NUMBER(4,0);
ls_submission_status VARCHAR2(3);
ls_proto_num VARCHAR2(20);
ls_protocol_number VARCHAR2(20);
ls_test_number VARCHAR2(20):=null;
ls_number VARCHAR2(20):=null;
li_flag NUMBER;
ls_proto VARCHAR2(10);
CURSOR c_submission IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_STATUS_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_SUBMISSION@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER ;
r_submission c_submission%ROWTYPE;

BEGIN
IF c_submission%ISOPEN THEN
CLOSE c_submission;
END IF;
OPEN c_submission;
LOOP
FETCH c_submission INTO r_submission;
EXIT WHEN c_submission%NOTFOUND;
ls_proto_num:=r_submission.PROTOCOL_NUMBER;
li_sequence:=r_submission.SEQUENCE_NUMBER;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_submission_id FROM DUAL;

begin
SELECT ID INTO li_committee_id FROM COMMITTEE WHERE COMMITTEE_ID=r_submission.COMMITTEE_ID AND SEQUENCE_NUMBER=(SELECT MAX(c.SEQUENCE_NUMBER) FROM COMMITTEE c WHERE c.COMMITTEE_ID=r_submission.COMMITTEE_ID);
exception
when others then
li_committee_id:=NULL;
end;
begin
SELECT ID INTO li_comm_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_submission.SCHEDULE_ID;
exception
when others then
li_comm_schedule_id:=NULL;
end;

ls_submission_status:=r_submission.SUBMISSION_STATUS_CODE;

IF ls_submission_status=202 THEN
ls_comm_decision_motion:=3;
ELSIF ls_submission_status=203 THEN
ls_comm_decision_motion:=1;
ELSIF ls_submission_status=205 THEN
ls_comm_decision_motion:=2;
ELSIF ls_submission_status=201 THEN
ls_comm_decision_motion:=4;
ELSE
ls_comm_decision_motion:=NULL;
END IF;

IF ls_submission_status =105 THEN

SELECT RTRIM(ls_proto_num,'T') INTO ls_protocol_number from dual;
SELECT FN_GET_KUALI_SEQ(ls_protocol_number,li_sequence) INTO li_seq FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_protocol_number AND SEQUENCE_NUMBER=li_seq;
INSERT INTO PROTOCOL_SUBMISSION(SUBMISSION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,PROTOCOL_ID,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE)
VALUES(li_submission_id,ls_proto_num,li_seq,r_submission.SUBMISSION_NUMBER,r_submission.SCHEDULE_ID,r_submission.COMMITTEE_ID,li_protocol_id,li_comm_schedule_id,li_committee_id,r_submission.SUBMISSION_TYPE_CODE,r_submission.SUBMISSION_TYPE_QUAL_CODE,r_submission.SUBMISSION_STATUS_CODE,r_submission.PROTOCOL_REVIEW_TYPE_CODE,r_submission.SUBMISSION_DATE,r_submission.COMMENTS,r_submission.YES_VOTE_COUNT,r_submission.NO_VOTE_COUNT,r_submission.ABSTAINER_COUNT,r_submission.VOTING_COMMENTS,r_submission.UPDATE_TIMESTAMP,LOWER(r_submission.UPDATE_USER),li_ver_nbr,SYS_GUID(),li_recused_count,ls_is_billable,ls_comm_decision_motion);
exception
when others then
dbms_output.put_line('Mising PROTOCOL_ID in PROTOCOL for PROTOCOL_NUMBER:'||ls_proto_num||' and SEQUENCE_NUMBER:'||r_submission.SEQUENCE_NUMBER||' and SUBMISSION_NUMBER:'||r_submission.SUBMISSION_NUMBER||'-'||sqlerrm);
end;
END IF;

SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;

  if ls_proto is not null and ls_proto!='T' then
  SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
 
  li_flag:=1;
if ls_number is null then
   select (ls_proto_num||li_sequence) into ls_number from dual;
   
   
   li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
    li_flag:=0;
    select (ls_proto_num||li_sequence) into ls_number from dual;
     
    
end if;
IF  li_flag=0 THEN

PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'SUBMISSION'); 
END IF;


elsif ls_proto is null  then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Missing PROTOCOL_ID in PROTOCOL for PROTOCOL_NUMBER:'|| ls_proto_num||' SEQUENCE_NUMBER:'|| li_seq||'and SUBMISSION_NUMBER:'|| r_submission.SUBMISSION_NUMBER||'-'||sqlerrm);
end;
begin
INSERT INTO PROTOCOL_SUBMISSION(SUBMISSION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,PROTOCOL_ID,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE)
VALUES(li_submission_id,ls_proto_num,li_seq,r_submission.SUBMISSION_NUMBER,r_submission.SCHEDULE_ID,r_submission.COMMITTEE_ID,li_protocol_id,li_comm_schedule_id,li_committee_id,r_submission.SUBMISSION_TYPE_CODE,r_submission.SUBMISSION_TYPE_QUAL_CODE,r_submission.SUBMISSION_STATUS_CODE,r_submission.PROTOCOL_REVIEW_TYPE_CODE,r_submission.SUBMISSION_DATE,r_submission.COMMENTS,r_submission.YES_VOTE_COUNT,r_submission.NO_VOTE_COUNT,r_submission.ABSTAINER_COUNT,r_submission.VOTING_COMMENTS,r_submission.UPDATE_TIMESTAMP,r_submission.UPDATE_USER,li_ver_nbr,SYS_GUID(),li_recused_count,ls_is_billable,ls_comm_decision_motion);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_SUBMISSION,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_submission.SUBMISSION_NUMBER );
end;

IF li_seq>0 THEN
li_flag:=1;
if ls_test_number is null then
   select (ls_proto_num||li_sequence) into ls_test_number from dual; 
   li_flag:=0;
elsif ls_test_number!=(ls_proto_num||li_sequence) then   
    li_flag:=0;
    select (ls_proto_num||li_sequence) into ls_test_number from dual; 
end if;
IF  li_flag=0 THEN

INSERT INTO PROTOCOL_SUBMISSION(SUBMISSION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,PROTOCOL_ID,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,li_seq,SUBMISSION_NUMBER,SCHEDULE_ID,COMMITTEE_ID,li_protocol_id,SCHEDULE_ID_FK,COMMITTEE_ID_FK,SUBMISSION_TYPE_CODE,SUBMISSION_TYPE_QUAL_CODE,SUBMISSION_STATUS_CODE,PROTOCOL_REVIEW_TYPE_CODE,SUBMISSION_DATE,COMMENTS,YES_VOTE_COUNT,NO_VOTE_COUNT,ABSTAINER_COUNT,VOTING_COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),RECUSED_COUNT,IS_BILLABLE,COMM_DECISION_MOTION_TYPE_CODE FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER<li_seq );
END IF;
END IF;
end if;
END LOOP;
CLOSE c_submission;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_protocol_action_id NUMBER(12,0);
li_protocol_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
ls_proto_num VARCHAR2(20); 
li_seq_num NUMBER(4,0);
ls_proto VARCHAR2(10);
ls_test_number VARCHAR2(20):=null;
li_flag NUMBER;
li_seq NUMBER(4,0);
ls_number VARCHAR2(20);
li_seq_number NUMBER(4,0);
ls_update_user VARCHAR2(60);

CURSOR c_actions IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,SUBMISSION_NUMBER,to_char(trim(COMMENTS)) COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,ACTION_DATE FROM OSP$PROTOCOL_ACTIONS@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_actions c_actions%ROWTYPE;

BEGIN

IF c_actions%ISOPEN THEN
CLOSE c_actions;
END IF;
OPEN c_actions;
LOOP
FETCH c_actions INTO r_actions;
EXIT WHEN c_actions%NOTFOUND;
ls_proto_num:=r_actions.PROTOCOL_NUMBER;
li_seq_num:=r_actions.SEQUENCE_NUMBER;
ls_update_user:=LOWER(r_actions.UPDATE_USER);

SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_seq_num) INTO li_seq  FROM DUAL;

SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;
--if ls_proto='A' or ls_proto='R'  then
if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_seq_num) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_seq_num) into ls_number from dual;
--ls_number:=(ls_proto_num||li_sequence);

li_flag:=0;
elsif ls_number!=(ls_proto_num||li_seq_num) then   
li_flag:=0;
select (ls_proto_num||li_seq_num) into ls_number from dual;

--ls_number:=(ls_proto_num||li_sequence);
end if;
IF  li_flag=0 THEN
--dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq_num||'-'||sqlerrm);
PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_seq_num,'ACTIONS'); 
END IF;
elsif ls_proto is null  then

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_protocol_action_id FROM DUAL;

begin
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and error is:'||sqlerrm);
end;


begin
select SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_actions.SUBMISSION_NUMBER;
exception 
when no_data_found then
li_submission_id:=NULL;
end;

begin
INSERT INTO PROTOCOL_ACTIONS(PROTOCOL_ACTION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,PROTOCOL_ID,SUBMISSION_ID_FK,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,OBJ_ID,PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE)
VALUES(li_protocol_action_id,ls_proto_num,li_seq,r_actions.SUBMISSION_NUMBER,r_actions.ACTION_ID,r_actions.PROTOCOL_ACTION_TYPE_CODE,li_protocol_id,li_submission_id,substrb(r_actions.COMMENTS,2000),r_actions.ACTION_DATE,r_actions.UPDATE_TIMESTAMP,ls_update_user,li_ver_nbr,r_actions.ACTION_DATE,SYS_GUID(),NULL,NULL,NULL,NULL);
exception 
when others then
dbms_output.put_line('ERROR IN PROTOCOL_ACTIONS,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq_num||'-'||sqlerrm);
end;

IF li_seq>0 THEN
--li_seq_number:=li_seq-1;
li_flag:=1;
if ls_test_number is null then
select (ls_proto_num||li_seq_num) into ls_test_number from dual; 
li_flag:=0;
elsif ls_test_number!=(ls_proto_num||li_seq_num) then   
li_flag:=0;
select (ls_proto_num||li_seq_num) into ls_test_number from dual; 
end if;
IF  li_flag=0 THEN

INSERT INTO PROTOCOL_ACTIONS(PROTOCOL_ACTION_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,PROTOCOL_ID,SUBMISSION_ID_FK,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,OBJ_ID,PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,ACTION_ID,PROTOCOL_ACTION_TYPE_CODE,li_protocol_id,NULL,COMMENTS,ACTION_DATE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,ACTUAL_ACTION_DATE,SYS_GUID(),PREV_SUBMISSION_STATUS_CODE,SUBMISSION_TYPE_CODE,PREV_PROTOCOL_STATUS_CODE,FOLLOWUP_ACTION_CODE FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=ls_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER<li_seq);
--PROTOCOL_ID=(SELECT MAX(PROTOCOL_ID) FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=ls_proto_num AND PROTOCOL_ID<li_protocol_id AND SEQUENCE_NUMBER=li_seq_number );
END IF;

END IF;
end if;

END LOOP;
CLOSE c_actions;
END;
/
DROP TABLE TEMP_PROTO_CORRESPONDENDE
/
CREATE TABLE TEMP_PROTO_CORRESPONDENDE
   (	"PROTOCOL_NUMBER" VARCHAR2(20 BYTE) NOT NULL ENABLE, 
	"SEQUENCE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"ACTION_ID" NUMBER(6,0) NOT NULL ENABLE, 
	"PROTO_CORRESP_TYPE_CODE" NUMBER(3,0) NOT NULL ENABLE, 
	"CORRESPONDENCE" BLOB DEFAULT EMPTY_BLOB(), 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE, 
	"FINAL_FLAG" VARCHAR2(1 BYTE))
/
commit
/
INSERT INTO	TEMP_PROTO_CORRESPONDENDE(PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTO_CORRESP_TYPE_CODE,CORRESPONDENCE,UPDATE_TIMESTAMP,UPDATE_USER,FINAL_FLAG)
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTO_CORRESP_TYPE_CODE,CORRESPONDENCE,UPDATE_TIMESTAMP,UPDATE_USER,FINAL_FLAG FROM OSP$PROTOCOL_CORRESPONDENCE@coeus.kuali
/
commit
/
DECLARE

li_correspondence_id NUMBER(12);
li_protocol_action_id NUMBER(12);
li_ver_nbr NUMBER(8):=1;
li_seq NUMBER(4,0);
ls_proto_num VARCHAR2(20);
li_sequence NUMBER(4,0);
li_protocol_id NUMBER(12,0);
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
ls_test_number VARCHAR2(20);
li_flag NUMBER;

CURSOR c_correspondence IS
SELECT  PROTOCOL_NUMBER,ACTION_ID,PROTO_CORRESP_TYPE_CODE,SEQUENCE_NUMBER,CORRESPONDENCE,UPDATE_TIMESTAMP,UPDATE_USER,NVL(FINAL_FLAG,'N') FINAL_FLAG
FROM TEMP_PROTO_CORRESPONDENDE  ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID;
r_correspondence c_correspondence%ROWTYPE;

BEGIN
IF c_correspondence%ISOPEN THEN
CLOSE c_correspondence;
END IF;
OPEN c_correspondence;
LOOP
FETCH c_correspondence INTO r_correspondence;
EXIT WHEN c_correspondence%NOTFOUND;

ls_proto_num:=r_correspondence.PROTOCOL_NUMBER;
li_sequence:=r_correspondence.SEQUENCE_NUMBER;

SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;

if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;

li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;

end if;
IF  li_flag=0 THEN

PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'CORRESPONDENT');
END IF;

elsif ls_proto is null  then

SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_correspondence_id FROM DUAL;
begin
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL where PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and error is:'||sqlerrm);
end;
begin
SELECT PROTOCOL_ACTION_ID INTO li_protocol_action_id FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND ACTION_ID=r_correspondence.ACTION_ID AND PROTOCOL_ID=li_protocol_id;
exception
when others then
dbms_output.put_line('Missing PROTOCOL_ACTION_ID in PROTOCOL_ACTIONS for PROTOCOL_NUMBER:'||ls_proto_num||' SEQUENCE_NUMBER:'||li_sequence||' SEQUENCE:'||li_seq||' and ACTION_ID:'||r_correspondence.ACTION_ID);
end;
begin
INSERT INTO PROTOCOL_CORRESPONDENCE(ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,PROTOCOL_ID,ACTION_ID_FK,PROTO_CORRESP_TYPE_CODE,FINAL_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,CORRESPONDENCE,OBJ_ID,CREATE_TIMESTAMP,CREATE_USER,FINAL_FLAG_TIMESTAMP)
VALUES(li_correspondence_id,ls_proto_num,li_seq,r_correspondence.ACTION_ID,li_protocol_id,li_protocol_action_id,r_correspondence.PROTO_CORRESP_TYPE_CODE,r_correspondence.FINAL_FLAG,r_correspondence.UPDATE_TIMESTAMP,LOWER(r_correspondence.UPDATE_USER),li_ver_nbr,r_correspondence.CORRESPONDENCE,SYS_GUID(),r_correspondence.UPDATE_TIMESTAMP,LOWER(r_correspondence.UPDATE_USER),null);
exception
when others then
dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_sequence||'SEQUENCE:'||li_seq);
end;
end if;
END LOOP;
CLOSE c_correspondence;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_exempt_checklist_id NUMBER(12,0);
ls_proto_num VARCHAR2(20);
li_seq NUMBER(4);
li_protocol_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
li_sequence NUMBER(4);
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
li_flag NUMBER;
CURSOR c_exempt IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_EXEMPT_CHKLST@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_exempt c_exempt%ROWTYPE;

BEGIN
IF c_exempt%ISOPEN THEN
CLOSE c_exempt;
END IF;
OPEN c_exempt;
LOOP
FETCH c_exempt INTO r_exempt;
EXIT WHEN c_exempt%NOTFOUND;
ls_proto_num:=r_exempt.PROTOCOL_NUMBER;
li_sequence:=r_exempt.SEQUENCE_NUMBER;

SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;

if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;

li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;

end if;
IF  li_flag=0 THEN


PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'EXEMPT'); 
END IF;
elsif ls_proto is null then

SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence)INTO li_seq FROM DUAL;

SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_exempt_checklist_id FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and error is:'||sqlerrm);
end;
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_exempt.SUBMISSION_NUMBER;
exception
when others then
dbms_output.put_line('Error while fetching SUBMISSION_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and SUBMISSION_NUMBER:'||r_exempt.SUBMISSION_NUMBER||'and error is:'||sqlerrm);
end;
begin
INSERT INTO PROTOCOL_EXEMPT_CHKLST(PROTOCOL_EXEMPT_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXEMPT_STUDIES_CHECKLIST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_exempt_checklist_id,li_protocol_id,li_submission_id,ls_proto_num,li_seq,r_exempt.SUBMISSION_NUMBER,r_exempt.EXEMPT_STUDIES_CHECKLIST_CODE,r_exempt.UPDATE_TIMESTAMP,LOWER(r_exempt.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXEMPT_CHKLST,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_sequence||'SUBMISSION_NUMBER:'||r_exempt.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

end if;

END LOOP;
CLOSE c_exempt;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_expedited_id NUMBER(12,0);
ls_proto_num VARCHAR2(20);
li_sequence NUMBER(4,0);
li_seq NUMBER(4,0);
li_protocol_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
li_flag NUMBER;

CURSOR c_expedited IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_EXPIDITED_CHKLST@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_expedited c_expedited%ROWTYPE;

BEGIN
IF c_expedited%ISOPEN THEN
CLOSE c_expedited;
END IF;
OPEN c_expedited;
LOOP
FETCH c_expedited INTO r_expedited;
EXIT WHEN c_expedited%NOTFOUND;
ls_proto_num:=r_expedited.PROTOCOL_NUMBER;
li_sequence:=r_expedited.SEQUENCE_NUMBER;

SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;

if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;


li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;


end if;
IF  li_flag=0 THEN

PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'EXPEDITED'); 
END IF;
elsif ls_proto is null then

SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_expedited_id FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and error is:'||sqlerrm);
end;
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_expedited.SUBMISSION_NUMBER;
exception
when others then
dbms_output.put_line('Error while fetching SUBMISSION_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and SUBMISSION_NUMBER:'||r_expedited.SUBMISSION_NUMBER||'and error is:'||sqlerrm);
end;
begin
INSERT INTO PROTOCOL_EXPIDITED_CHKLST(PROTOCOL_EXPEDITED_CHKLST_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,EXPEDITED_REV_CHKLST_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_expedited_id,li_protocol_id,li_submission_id,ls_proto_num,li_seq,r_expedited.SUBMISSION_NUMBER,r_expedited.EXPEDITED_REV_CHKLST_CODE,r_expedited.UPDATE_TIMESTAMP,LOWER(r_expedited.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_EXPIDITED_CHKLST,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_sequence||'SUBMISSION_NUMBER:'||r_expedited.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

end if;


END LOOP;
CLOSE c_expedited;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_attendance_id NUMBER(12,0);
li_schedule_id NUMBER(12,0);
ls_person_nm VARCHAR2(90);
ls_person_id VARCHAR2(40);
ls_first_nm VARCHAR2(30);
ls_middle_nm VARCHAR2(30);
ls_last_nm VARCHAR2(30);
CURSOR c_attendance IS
SELECT SCHEDULE_ID,PERSON_ID,GUEST_FLAG,ALTERNATE_FLAG,ALTERNATE_FOR,NON_EMPLOYEE_FLAG,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_SCHEDULE_ATTENDANCE@coeus.kuali;
r_attendance c_attendance%ROWTYPE;

BEGIN
IF c_attendance%ISOPEN THEN
CLOSE c_attendance;
END IF;
OPEN c_attendance;
LOOP
FETCH c_attendance INTO r_attendance;
EXIT WHEN c_attendance%NOTFOUND;

SELECT SEQ_MEETING_ID.NEXTVAL INTO li_attendance_id FROM DUAL;
begin
SELECT ID INTO li_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_attendance.SCHEDULE_ID;
exception
when others then
dbms_output.put_line('Error while fetching ID using SCHEDULE_ID:'||r_attendance.SCHEDULE_ID||'and error is:'||sqlerrm);
end;
--SELECT PERSON_NAME INTO ls_person_nm FROM OSP$COMM_MEMBERSHIPS@coeus.kuali WHERE PERSON_ID=r_attendance.PERSON_ID;

IF r_attendance.NON_EMPLOYEE_FLAG='N' THEN
	begin
	SELECT FULL_NAME INTO ls_person_nm FROM OSP$PERSON@coeus.kuali WHERE PERSON_ID=r_attendance.PERSON_ID;
    exception
	when others then
	ls_person_nm := null;
	end;

	ls_person_id:=r_attendance.PERSON_ID;

ELSE
		begin
		SELECT LAST_NAME,FIRST_NAME,MIDDLE_NAME INTO ls_last_nm,ls_first_nm,ls_middle_nm FROM OSP$ROLODEX@coeus.kuali WHERE to_char(ROLODEX_ID)=r_attendance.PERSON_ID;
		exception
		when others then
		ls_last_nm   := 'nil';
		ls_first_nm  := 'nil';
		ls_middle_nm := 'nil';
		end;
		
		IF ls_first_nm IS NOT  NULL THEN
		IF ls_middle_nm IS NOT NULL THEN
		IF ls_last_nm IS NOT NULL  THEN  
		ls_person_nm:= (ls_last_nm||','||ls_first_nm||' '||ls_middle_nm); 
		ELSE
		ls_person_nm:=(ls_first_nm||' '||ls_middle_nm); 
		END IF;  
		ELSIF ls_last_nm IS  NULL THEN
		ls_person_nm:=ls_first_nm; 
		ELSE
		ls_person_nm:=(ls_last_nm||','||ls_first_nm);       
		END IF;     

		ELSIF ls_last_nm IS NOT NULL THEN
		ls_person_nm:=ls_last_nm; 
		ELSE
		ls_person_nm:=NULL;
		END IF;
		
		ls_person_id:=r_attendance.PERSON_ID;
END IF;

begin
INSERT INTO COMM_SCHEDULE_ATTENDANCE(COMM_SCHEDULE_ATTENDANCE_ID,PERSON_NAME,SCHEDULE_ID_FK,PERSON_ID,GUEST_FLAG,ALTERNATE_FLAG,ALTERNATE_FOR,NON_EMPLOYEE_FLAG,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_attendance_id,ls_person_nm,li_schedule_id,ls_person_id,r_attendance.GUEST_FLAG,r_attendance.ALTERNATE_FLAG,r_attendance.ALTERNATE_FOR,r_attendance.NON_EMPLOYEE_FLAG,r_attendance.COMMENTS,r_attendance.UPDATE_TIMESTAMP,LOWER(r_attendance.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_SCHEDULE_ATTENDANCE,SCHEDULE_ID_FK:'||li_schedule_id||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_attendance;
commit;
dbms_output.put_line('COMPLETED COMM_SCHEDULE_ATTENDANCE');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_reviewer_id NUMBER(12,0);
li_rolodex_id NUMBER(6,0);
ls_person_id VARCHAR2(40);
li_submission_id NUMBER(12,0);
li_protocol_id NUMBER(12,0);
ls_proto_num VARCHAR2(20);
li_sequence NUMBER(4,0);
li_seq NUMBER(4,0);
li_sequence_num NUMBER(4,0);
li_submission_status NUMBER(3);
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
ls_test_number VARCHAR2(20);
li_flag NUMBER;
li_rolodex_count NUMBER;

CURSOR c_reviewers IS 
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PERSON_ID,REVIEWER_TYPE_CODE,NON_EMPLOYEE_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,ASSIGNED_DATE,DUE_DATE,REVIEW_COMPLETE,RECOMMENDED_ACTION FROM OSP$PROTOCOL_REVIEWERS@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_reviewers c_reviewers%ROWTYPE;

BEGIN
IF c_reviewers%ISOPEN THEN
CLOSE c_reviewers;
END IF;
OPEN c_reviewers;
LOOP
FETCH c_reviewers INTO r_reviewers;
EXIT WHEN c_reviewers%NOTFOUND;
begin
ls_proto_num:=r_reviewers.PROTOCOL_NUMBER;
li_sequence:=r_reviewers.SEQUENCE_NUMBER;
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;



SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;

if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;


li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;


end if;
IF  li_flag=0 THEN 
begin
PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'REVIEWERS'); 
exception
when others then
dbms_output.put_line(' Exception from procedure PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence)'||ls_proto_num||' , '||li_seq||' , '||li_sequence||' .'||sqlerrm);
end;
END IF;
elsif ls_proto is null then
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_reviewer_id FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and error is:'||sqlerrm);
end; 
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_reviewers.SUBMISSION_NUMBER;
exception
when others then
dbms_output.put_line('Error while fetching SUBMISSION_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and SUBMISSION_NUMBER:'||r_reviewers.SUBMISSION_NUMBER||'and error is:'||sqlerrm);
end;


li_rolodex_id:=null;
ls_person_id:=null;

IF  r_reviewers.NON_EMPLOYEE_FLAG='Y' THEN
select count(rolodex_id) into li_rolodex_count from ROLODEX where to_char(rolodex_id)=r_reviewers.PERSON_ID;
if li_rolodex_count>0 then
li_rolodex_id:=r_reviewers.PERSON_ID;
ls_person_id:=null;
else     
ls_person_id:=r_reviewers.PERSON_ID;
li_rolodex_id:=null;

end if;
ELSE      
ls_person_id:=r_reviewers.PERSON_ID;       

END IF;    




begin
INSERT INTO PROTOCOL_REVIEWERS(PROTOCOL_REVIEWER_ID,PROTOCOL_ID,SUBMISSION_ID_FK,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PERSON_ID,NON_EMPLOYEE_FLAG,REVIEWER_TYPE_CODE,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,ROLODEX_ID)
VALUES(li_reviewer_id,li_protocol_id,li_submission_id,ls_proto_num,li_seq,r_reviewers.SUBMISSION_NUMBER,ls_person_id,r_reviewers.NON_EMPLOYEE_FLAG,r_reviewers.REVIEWER_TYPE_CODE,r_reviewers.UPDATE_TIMESTAMP,LOWER(r_reviewers.UPDATE_USER),li_ver_nbr,SYS_GUID(),li_rolodex_id);
exception
when others then
dbms_output.put_line('Missing data in PROTOCOL_REVIEWERS,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_sequence||'SUBMISSION_NUMBER:'||r_reviewers.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

end if;
exception
when others then
dbms_output.put_line('Missing PROTOCOL_ID (protocol numer, sequence number)'||r_reviewers.PROTOCOL_NUMBER||' , '||r_reviewers.SEQUENCE_NUMBER);
end;
END LOOP;
CLOSE c_reviewers;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_schedule_minutes_id NUMBER(12,0);
li_seq NUMBER(4,0);
li_sequence NUMBER(4,0);
ls_proto_num VARCHAR2(20);
li_protocol_reviewer NUMBER(12,0);
li_comm_schecule_id NUMBER(12,0);
li_act_items_id NUMBER(12,0);
li_protocol_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
ll_minute_entry CLOB;
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
li_flag NUMBER;
ls_person_id VARCHAR2(9);
ls_contingency_code VARCHAR2(4);
CURSOR c_minutes IS
SELECT SCHEDULE_ID,ENTRY_NUMBER,MINUTE_ENTRY_TYPE_CODE,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PRIVATE_COMMENT_FLAG,PROTOCOL_CONTINGENCY_CODE,MINUTE_ENTRY,UPDATE_TIMESTAMP,UPDATE_USER,FINAL_FLAG,PERSON_ID,CREATE_USER,CREATE_TIMESTAMP FROM OSP$COMM_SCHEDULE_MINUTES@coeus.kuali;
r_minutes c_minutes%ROWTYPE;

BEGIN
IF c_minutes%ISOPEN THEN
CLOSE c_minutes;
END IF;
OPEN c_minutes;
LOOP
FETCH c_minutes INTO r_minutes;
EXIT WHEN c_minutes%NOTFOUND;
ls_proto_num:=r_minutes.PROTOCOL_NUMBER;
li_sequence:=r_minutes.SEQUENCE_NUMBER;
SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;
if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL; 
li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;   
li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;    

end if;
IF  li_flag=0 THEN 
PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'SCHEDULE'); 
END IF;
elsif ls_proto is null then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
IF r_minutes.PERSON_ID IS NULL THEN
begin
SELECT PERSON_ID INTO ls_person_id FROM OSP$PROTOCOL_REVIEWERS@coeus.kuali WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_sequence AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER;
exception
when others then
--dbms_output.put_line('PROTOCOL_NUMBER1:'||ls_proto_num||'AND'||'SUBMISSION_NUMBER:'||r_minutes.SUBMISSION_NUMBER||'NOT IN PARENT TABLE');
ls_person_id:=null;
end;
ELSE
	ls_person_id:=r_minutes.PERSON_ID;
END IF;		

SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
SELECT SEQ_MEETING_ID.NEXTVAL INTO li_schedule_minutes_id FROM DUAL;

begin
SELECT PROTOCOL_REVIEWER_ID INTO li_protocol_reviewer FROM PROTOCOL_REVIEWERS WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER AND PERSON_ID=ls_person_id;
exception
when others then
--dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_minutes.SUBMISSION_NUMBER||'PERSON_ID:'||ls_person_id);
li_protocol_reviewer:=null;
end;
begin
SELECT ID INTO li_comm_schecule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_minutes.SCHEDULE_ID;
exception
when others then
dbms_output.put_line('Missing ID in COMM_SCHEDULE for SCHEDULE_ID:'||r_minutes.SCHEDULE_ID);
end;
begin
SELECT COMM_SCHEDULE_ACT_ITEMS_ID INTO li_act_items_id FROM COMM_SCHEDULE_ACT_ITEMS WHERE SCHEDULE_ID_FK=li_comm_schecule_id;
exception
when others then
li_act_items_id:=null;

end;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when others then
--dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq);
li_protocol_id:=null;
end;
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_minutes.SUBMISSION_NUMBER;
exception
when others then
--dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq);
li_submission_id:=null;
end;
SELECT to_char(r_minutes.MINUTE_ENTRY) INTO ll_minute_entry FROM DUAL;

ls_contingency_code:=r_minutes.PROTOCOL_CONTINGENCY_CODE;
IF ls_contingency_code=100 OR ls_contingency_code=101 THEN
ls_contingency_code:=NULL;
ELSE
ls_contingency_code:=r_minutes.PROTOCOL_CONTINGENCY_CODE;
END IF;
begin
INSERT INTO COMM_SCHEDULE_MINUTES(COMM_SCHEDULE_MINUTES_ID,FINAL_FLAG,REVIEWER_ID_FK,SCHEDULE_ID_FK,PROTOCOL_ID_FK,ENTRY_NUMBER,MINUTE_ENTRY_TYPE_CODE,SUBMISSION_ID_FK,PRIVATE_COMMENT_FLAG,PROTOCOL_CONTINGENCY_CODE,MINUTE_ENTRY,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,PROTOCOL_ONLN_RVW_FK,COMM_SCHEDULE_ACT_ITEMS_ID_FK,CREATE_USER,CREATE_TIMESTAMP)
VALUES(li_schedule_minutes_id,r_minutes.FINAL_FLAG,li_protocol_reviewer,li_comm_schecule_id,li_protocol_id,r_minutes.ENTRY_NUMBER,r_minutes.MINUTE_ENTRY_TYPE_CODE,li_submission_id,r_minutes.PRIVATE_COMMENT_FLAG,ls_contingency_code,ll_minute_entry,r_minutes.UPDATE_TIMESTAMP,LOWER(r_minutes.UPDATE_USER),li_ver_nbr,SYS_GUID(),NULL,li_act_items_id,r_minutes.CREATE_USER,r_minutes.CREATE_TIMESTAMP);
exception
when others then
dbms_output.put_line('PROTOCOL_CONTINGENCY_CODE:'||r_minutes.PROTOCOL_CONTINGENCY_CODE||'AND'||'SCHEDULE_ID:'||r_minutes.SCHEDULE_ID||'NOT IN PARENT TABLE');
end;
end if;
END LOOP;
CLOSE c_minutes;
commit;
END;
/
DROP TABLE TEMP_COMM_SCHEDULE_MINUTE_DOC
/
CREATE TABLE "TEMP_COMM_SCHEDULE_MINUTE_DOC" 
   (	"SCHEDULE_ID" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"MINUTE_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"MINUTE_NAME" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"PDF_STORE" BLOB DEFAULT EMPTY_BLOB(), 
	"CREATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE, 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE);
	commit;
	insert into TEMP_COMM_SCHEDULE_MINUTE_DOC(SCHEDULE_ID,MINUTE_NUMBER,MINUTE_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER)
	select SCHEDULE_ID,MINUTE_NUMBER,MINUTE_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_SCHEDULE_MINUTE_DOC@coeus.kuali;
	commit
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_minute_doc_id NUMBER(12,0);
li_schedule_id NUMBER(12,0);
CURSOR c_minute_doc IS
SELECT SCHEDULE_ID,MINUTE_NUMBER,MINUTE_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER FROM TEMP_COMM_SCHEDULE_MINUTE_DOC;
r_minute_doc c_minute_doc%ROWTYPE;

BEGIN
IF c_minute_doc%ISOPEN THEN
CLOSE c_minute_doc;
END IF;
OPEN c_minute_doc;
LOOP
FETCH c_minute_doc INTO r_minute_doc;
EXIT WHEN c_minute_doc%NOTFOUND;

SELECT SEQ_MEETING_ID.NEXTVAL INTO li_minute_doc_id FROM DUAL;
begin
SELECT ID INTO li_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_minute_doc.SCHEDULE_ID;
exception 
when others then
dbms_output.put_line('Error while fetching ID using SCHEDULE_ID:'||r_minute_doc.SCHEDULE_ID||' and error is:'||sqlerrm);
end;

begin
INSERT INTO COMM_SCHEDULE_MINUTE_DOC(COMM_SCHEDULE_MINUTE_DOC_ID,SCHEDULE_ID_FK,MINUTE_NUMBER,MINUTE_NAME,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,PDF_STORE)
VALUES(li_minute_doc_id,li_schedule_id,r_minute_doc.MINUTE_NUMBER,r_minute_doc.MINUTE_NAME,r_minute_doc.CREATE_TIMESTAMP,r_minute_doc.CREATE_USER,r_minute_doc.UPDATE_TIMESTAMP,LOWER(r_minute_doc.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_minute_doc.PDF_STORE);
exception 
when others then
dbms_output.put_line('ERROR IN COMM_SCHEDULE_MINUTE_DOC,SCHEDULE_ID_FK:'||li_schedule_id||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_minute_doc;
commit;
dbms_output.put_line('COMPLETED COMM_SCHEDULE_MINUTE_DOC');
END;
/
DECLARE
  COUNT_INDEXES INTEGER:=0;
  COUNT_UQ_CONST INTEGER:=0;
BEGIN
  SELECT COUNT(*) INTO COUNT_UQ_CONST FROM USER_CONSTRAINTS WHERE CONSTRAINT_NAME='UQ_COMM_BATCH_CORRESP_ID';
  IF COUNT_UQ_CONST > 0 THEN
    EXECUTE IMMEDIATE 'ALTER TABLE COMM_BATCH_CORRESP_DETAIL DISABLE CONSTRAINT UQ_COMM_BATCH_CORRESP_ID';
  END IF;
  SELECT COUNT(*) INTO COUNT_INDEXES FROM USER_INDEXES WHERE INDEX_NAME = 'UQ_COMM_BATCH_CORRESP_ID';
  IF COUNT_INDEXES > 0 THEN
    EXECUTE IMMEDIATE 'DROP INDEX UQ_COMM_BATCH_CORRESP_ID';
  END IF;
END;
/
create or replace
PROCEDURE PROC_CORRESP_AMMENDMENT(as_proto_num IN VARCHAR2,as_sequence IN NUMBER,as_coeus_sequence IN NUMBER,as_corresp_id IN VARCHAR2,as_correspondence_id IN NUMBER)
IS
li_ver_nbr NUMBER(8):=1;
li_batch_corresp_detail NUMBER(12,0);
li_protocol_corresp NUMBER(12,0);
li_protocol_action NUMBER(12,0);
li_seq NUMBER(4):=as_sequence;
li_count NUMBER;
li_num NUMBER;
li_seq_num NUMBER(4);
CURSOR c_corresp_detail(c_corresp_id NUMBER,c_proto_num VARCHAR2,c_coeus_sequence NUMBER ) IS
SELECT CORRESP_BATCH_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_CORRESP_BATCH_DETAIL@coeus.kuali
WHERE CORRESP_BATCH_ID=c_corresp_id AND PROTOCOL_NUMBER=c_proto_num AND SEQUENCE_NUMBER=c_coeus_sequence ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID ;
r_corresp_detail c_corresp_detail%ROWTYPE;
BEGIN
IF c_corresp_detail%ISOPEN THEN
CLOSE c_corresp_detail;
END IF;
OPEN c_corresp_detail(as_corresp_id,as_proto_num,as_coeus_sequence);
LOOP
FETCH c_corresp_detail INTO r_corresp_detail;
EXIT WHEN c_corresp_detail%NOTFOUND;

SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_batch_corresp_detail FROM DUAL;
begin
select SEQUENCE_NUMBER into li_seq_num from PROTOCOL_CORRESPONDENCE where PROTOCOL_NUMBER=r_corresp_detail.PROTOCOL_NUMBER and ACTION_ID=r_corresp_detail.ACTION_ID;
SELECT ID INTO li_protocol_corresp FROM PROTOCOL_CORRESPONDENCE WHERE PROTOCOL_NUMBER=r_corresp_detail.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq_num AND ACTION_ID=r_corresp_detail.ACTION_ID; 
SELECT MAX(PROTOCOL_ACTION_ID) INTO li_protocol_action FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=r_corresp_detail.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq_num AND ACTION_ID=r_corresp_detail.ACTION_ID; 

INSERT INTO COMM_BATCH_CORRESP_DETAIL(COMM_BATCH_CORRESP_DETAIL_ID,COMM_BATCH_CORRESP_ID,PROTOCOL_ACTION_ID,PROTOCOL_CORRESPONDENCE_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_batch_corresp_detail,as_correspondence_id,li_protocol_action,li_protocol_corresp,r_corresp_detail.UPDATE_TIMESTAMP,LOWER(r_corresp_detail.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_BATCH_CORRESP_DETAIL,COMM_BATCH_CORRESP_ID:'||r_corresp_detail.CORRESP_BATCH_ID||'PROTOCOL_NUMBER:'||r_corresp_detail.PROTOCOL_NUMBER||'ACTION_ID:'||r_corresp_detail.ACTION_ID||'-'||sqlerrm);
end;
--SELECT COUNT(PROTOCOL_NUMBER) INTO li_count FROM PROTOCOL WHERE PROTOCOL_NUMBER=as_proto_num ;
--   li_count:=li_count-1;
--      FOR li_num in 1..li_count
--      LOOP
--      li_seq:=li_seq+1;      
--SELECT ID INTO li_protocol_corresp FROM PROTOCOL_CORRESPONDENCE WHERE PROTOCOL_NUMBER=r_corresp_detail.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq; 
--SELECT MAX(PROTOCOL_ACTION_ID) INTO li_protocol_action FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=r_corresp_detail.PROTOCOL_NUMBER AND SEQUENCE_NUMBER=li_seq; 
--INSERT INTO COMM_BATCH_CORRESP_DETAIL(COMM_BATCH_CORRESP_DETAIL_ID,COMM_BATCH_CORRESP_ID,PROTOCOL_ACTION_ID,PROTOCOL_CORRESPONDENCE_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
--SELECT SEQ_COMMITTEE_ID.NEXTVAL,COMM_BATCH_CORRESP_ID,PROTOCOL_ACTION_ID,PROTOCOL_CORRESPONDENCE_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID() FROM COMM_BATCH_CORRESP_DETAIL WHERE 
--COMM_BATCH_CORRESP_ID=as_corresp_id;
--END LOOP;
END LOOP;
CLOSE c_corresp_detail;
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_comm_batch_corresp NUMBER(12);
li_batch_corresp_detail NUMBER(12,0);
li_protocol_corresp NUMBER(12,0);
li_protocol_action NUMBER(12,0);
ls_corresp_batch VARCHAR2(10);
ls_proto_num VARCHAR2(20);
li_sequence NUMBER(4);
ls_proto VARCHAR2(10);
ls_number VARCHAR2(20):=null;
li_flag NUMBER;
li_seq NUMBER(4);
li_protocol_id NUMBER(12,0);
CURSOR c_corresp IS
SELECT CORRESP_BATCH_ID,COMMITTEE_ID,CORRESP_BATCH_TYPE_CODE,BATCH_RUN_DATE,TIME_WINDOW_START,TIME_WINDOW_END,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_CORRESP_BATCH@coeus.kuali;
r_corresp c_corresp%ROWTYPE;

CURSOR c_corresp_detail(as_corresp_batch_id VARCHAR2) IS
SELECT CORRESP_BATCH_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$COMM_CORRESP_BATCH_DETAIL@coeus.kuali
WHERE CORRESP_BATCH_ID=as_corresp_batch_id ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,ACTION_ID;
r_corresp_detail c_corresp_detail%ROWTYPE;

BEGIN
IF c_corresp%ISOPEN THEN
CLOSE c_corresp;
END IF;
OPEN c_corresp;
LOOP
FETCH c_corresp INTO r_corresp;
EXIT WHEN c_corresp%NOTFOUND;
SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_comm_batch_corresp FROM DUAL;
ls_corresp_batch:=r_corresp.CORRESP_BATCH_ID;
begin
INSERT INTO COMM_BATCH_CORRESP(COMM_BATCH_CORRESP_ID,COMMITTEE_ID,BATCH_CORRESPONDENCE_TYPE_CODE,BATCH_RUN_DATE,TIME_WINDOW_START,TIME_WINDOW_END,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_comm_batch_corresp,r_corresp.COMMITTEE_ID,r_corresp.CORRESP_BATCH_TYPE_CODE,r_corresp.BATCH_RUN_DATE,r_corresp.TIME_WINDOW_START,r_corresp.TIME_WINDOW_END,r_corresp.UPDATE_TIMESTAMP,LOWER(r_corresp.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_BATCH_CORRESP,COMM_BATCH_CORRESP_ID:'||r_corresp.CORRESP_BATCH_ID||'-'||sqlerrm);
end;

IF c_corresp_detail%ISOPEN THEN
CLOSE c_corresp_detail;
END IF;
OPEN c_corresp_detail(ls_corresp_batch);
LOOP
FETCH c_corresp_detail INTO r_corresp_detail;
EXIT WHEN c_corresp_detail%NOTFOUND;
ls_proto_num:=r_corresp_detail.PROTOCOL_NUMBER;
li_sequence:=r_corresp_detail.SEQUENCE_NUMBER;
SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;
if ls_proto is not null and ls_proto!='T' then
	  SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;         
	  li_flag:=1;
	if ls_number is null then
	   select (ls_proto_num||li_sequence) into ls_number from dual;           
	   li_flag:=0;
	elsif ls_number!=(ls_proto_num||li_sequence) then   
		li_flag:=0;
		select (ls_proto_num||li_sequence) into ls_number from dual;             

end if;
IF  li_flag=0 THEN
PROC_CORRESP_AMMENDMENT(ls_proto_num,li_seq,li_sequence,ls_corresp_batch,li_comm_batch_corresp); 
END IF;
elsif ls_proto is null then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
SELECT SEQ_COMMITTEE_ID.NEXTVAL INTO li_batch_corresp_detail FROM DUAL;
select PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL where PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
begin
SELECT ID INTO li_protocol_corresp FROM PROTOCOL_CORRESPONDENCE WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND ACTION_ID=r_corresp_detail.ACTION_ID; 
exception
when others then
dbms_output.put_line('Missing ID in PROTOCOL_CORRESPONDENCE for PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE:'||li_seq||'SEQUENCE_NUMBER:'||li_sequence||'ACTION_ID:'||r_corresp_detail.ACTION_ID);
end;
begin
SELECT PROTOCOL_ACTION_ID INTO li_protocol_action FROM PROTOCOL_ACTIONS WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND ACTION_ID=r_corresp_detail.ACTION_ID AND PROTOCOL_ID=li_protocol_id; 
exception
when others then
dbms_output.put_line('Error while fetching PROTOCOL_ACTION_ID using PROTOCOL_NUMBER:'||ls_proto_num||'and SEQUENCE_NUMBER:'||li_seq||'and ACTION_ID:'||r_corresp_detail.ACTION_ID||'and PROTOCOL_ID:'||li_protocol_id||'and error is:'||substr(sqlerrm,1,100));
end;
begin
INSERT INTO COMM_BATCH_CORRESP_DETAIL(COMM_BATCH_CORRESP_DETAIL_ID,COMM_BATCH_CORRESP_ID,PROTOCOL_ACTION_ID,PROTOCOL_CORRESPONDENCE_ID,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_batch_corresp_detail,li_comm_batch_corresp ,li_protocol_action,li_protocol_corresp,r_corresp_detail.UPDATE_TIMESTAMP,LOWER(r_corresp_detail.UPDATE_USER),li_ver_nbr,SYS_GUID());
exception
when others then
dbms_output.put_line('ERROR IN COMM_BATCH_CORRESP_DETAIL,COMM_BATCH_CORRESP_ID:'||r_corresp_detail.CORRESP_BATCH_ID||'-'||sqlerrm);
end;
end if;
END LOOP;
CLOSE c_corresp_detail;
END LOOP;
CLOSE c_corresp;
dbms_output.put_line('COMPLETED COMM_BATCH_CORRESP');
END;
/
DROP TABLE TEMP_SCHEDULE_AGENDA
/
CREATE TABLE "TEMP_SCHEDULE_AGENDA" 
   (	"SCHEDULE_ID" VARCHAR2(10 BYTE) NOT NULL ENABLE, 
	"AGENDA_NUMBER" NUMBER(4,0) NOT NULL ENABLE, 
	"AGENDA_NAME" VARCHAR2(200 BYTE) NOT NULL ENABLE, 
	"PDF_STORE" BLOB DEFAULT EMPTY_BLOB() NOT NULL ENABLE, 
	"CREATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"CREATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE, 
	"UPDATE_TIMESTAMP" DATE NOT NULL ENABLE, 
	"UPDATE_USER" VARCHAR2(8 BYTE) NOT NULL ENABLE);
	commit;
	insert into TEMP_SCHEDULE_AGENDA(SCHEDULE_ID,AGENDA_NUMBER,AGENDA_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER)
	select SCHEDULE_ID,AGENDA_NUMBER,AGENDA_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$SCHEDULE_AGENDA@coeus.kuali;
	commit
	/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_schedule_agenda_id NUMBER(12,0);
li_schedule_id NUMBER(12,0);
CURSOR c_agenda IS
SELECT SCHEDULE_ID,AGENDA_NUMBER,AGENDA_NAME,PDF_STORE,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER FROM TEMP_SCHEDULE_AGENDA;
r_agenda c_agenda%ROWTYPE;

BEGIN
IF c_agenda%ISOPEN THEN
CLOSE c_agenda;
END IF;
OPEN c_agenda;
LOOP
FETCH c_agenda INTO r_agenda;
EXIT WHEN c_agenda%NOTFOUND;

SELECT SEQ_MEETING_ID.NEXTVAL INTO li_schedule_agenda_id FROM DUAL;
begin
SELECT ID INTO li_schedule_id FROM COMM_SCHEDULE WHERE SCHEDULE_ID=r_agenda.SCHEDULE_ID;
exception
when others then
dbms_output.put_line('Error while fetching ID using SCHEDULE_ID:'||r_agenda.SCHEDULE_ID||'and error is:'||sqlerrm);
end;
begin
INSERT INTO SCHEDULE_AGENDA(SCHEDULE_AGENDA_ID,SCHEDULE_ID_FK,AGENDA_NUMBER,AGENDA_NAME,CREATE_TIMESTAMP,CREATE_USER,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,PDF_STORE)
VALUES(li_schedule_agenda_id,li_schedule_id,r_agenda.AGENDA_NUMBER,r_agenda.AGENDA_NAME,r_agenda.CREATE_TIMESTAMP,r_agenda.CREATE_USER,r_agenda.UPDATE_TIMESTAMP,LOWER(r_agenda.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_agenda.PDF_STORE);
exception
when others then
dbms_output.put_line('ERROR IN SCHEDULE_AGENDA,SCHEDULE_ID_FK:'||li_schedule_id||'-'||sqlerrm);
end;
END LOOP;
CLOSE c_agenda;
dbms_output.put_line('COMPLETED SCHEDULE_AGENDA');
END;
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_vote_abstainee_id NUMBER(12,0);
ls_proto_num VARCHAR2(20);
li_sequence NUMBER(4);
li_seq NUMBER(4);
ls_person_id VARCHAR2(40);
li_rolodex_id NUMBER(12,0);
ls_proto VARCHAR2(10);
li_protocol_id NUMBER(12,0);
ls_number VARCHAR2(20):=null;
li_flag NUMBER;
li_rolodex_count NUMBER;
li_submission_id NUMBER(12,0);
CURSOR c_vote IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SCHEDULE_ID,PERSON_ID,NON_EMPLOYEE_FLAG,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER FROM OSP$PROTOCOL_VOTE_ABSTAINEES@coeus.kuali ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER;
r_vote c_vote%ROWTYPE;


BEGIN
IF c_vote%ISOPEN THEN
CLOSE c_vote;
END IF;
OPEN c_vote;
LOOP
FETCH c_vote INTO r_vote;
EXIT WHEN c_vote%NOTFOUND;
ls_proto_num:=r_vote.PROTOCOL_NUMBER;
li_sequence:=r_vote.SEQUENCE_NUMBER;
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL;
SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;
if ls_proto is not null and ls_proto!='T' then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_sequence) INTO li_seq FROM DUAL; 
li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_sequence) into ls_number from dual;   
li_flag:=0;
elsif ls_number!=(ls_proto_num||li_sequence) then   
li_flag:=0;
select (ls_proto_num||li_sequence) into ls_number from dual;    
end if;
IF  li_flag=0 THEN 
PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_sequence,'ABSTAINEE');
END IF;
elsif ls_proto is null then
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT MAX(SUBMISSION_ID) INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_vote_abstainee_id FROM DUAL;
li_rolodex_id:=null;
ls_person_id:=null;
IF  r_vote.NON_EMPLOYEE_FLAG='Y' THEN
 select count(rolodex_id) into li_rolodex_count from ROLODEX where to_char(rolodex_id)=r_vote.PERSON_ID;
 if li_rolodex_count>0 then
 li_rolodex_id:=r_vote.PERSON_ID;
 ls_person_id:=null;     
 else     
	ls_person_id:=r_vote.PERSON_ID;
	 li_rolodex_id:=null;     
 end if;
ELSE      
	ls_person_id:=r_vote.PERSON_ID;
 
END IF;
begin
INSERT INTO PROTOCOL_VOTE_ABSTAINEES(PROTOCOL_VOTE_ABSTAINEES_ID,PROTOCOL_ID_FK,PERSON_ID,NON_EMPLOYEE_FLAG,COMMENTS,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,SUBMISSION_ID_FK,ROLODEX_ID)
VALUES(li_vote_abstainee_id,li_protocol_id,ls_person_id,r_vote.NON_EMPLOYEE_FLAG,r_vote.COMMENTS,r_vote.UPDATE_TIMESTAMP,LOWER(r_vote.UPDATE_USER),li_ver_nbr,SYS_GUID(),li_submission_id,li_rolodex_id);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_VOTE_ABSTAINEES,PROTOCOL_ID_FK:'||li_protocol_id||'-'||sqlerrm);
end;
end if;
END LOOP;
CLOSE c_vote;
END;
/ 
DECLARE
li_ver_nbr NUMBER(8):=1;
ls_proto_num VARCHAR2(20);
li_seq_num NUMBER(4,0);
li_protocol_id NUMBER(12,0);
li_submission_id NUMBER(12,0);
li_submission_doc_id NUMBER(12,0);
ls_content_type VARCHAR2(255);
li_seq NUMBER(4,0);
ls_proto VARCHAR2(10);
ls_submission_status VARCHAR2(3);
li_flag NUMBER;
ls_test_number VARCHAR2(20):=null;
ls_protocol_number VARCHAR2(20);
ls_number VARCHAR2(20);

CURSOR c_doc IS
SELECT PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,MIME_TYPE,DESCRIPTION 
FROM TEMP_PROTO_SUBMISSION_DOC ORDER BY PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER;
r_doc c_doc%ROWTYPE;

BEGIN
IF c_doc%ISOPEN THEN 
CLOSE c_doc;
END IF;
OPEN c_doc;
LOOP
FETCH c_doc INTO r_doc;
EXIT WHEN c_doc%NOTFOUND;
ls_proto_num:=r_doc.PROTOCOL_NUMBER;
li_seq_num:=r_doc.SEQUENCE_NUMBER;
SELECT SEQ_PROTOCOL_ID.NEXTVAL INTO li_submission_doc_id FROM DUAL;
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_seq_num) INTO li_seq FROM DUAL;
BEGIN
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE  PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when no_data_found then
dbms_output.put_line('Missing PROTOCOL_ID in PROTOCOL for PROTOCOL_NUMBER:'|| ls_proto_num||'SEQUENCE_NUMBER:'|| li_seq||' and SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER);
END;
begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_doc.SUBMISSION_NUMBER;
exception
when no_data_found then
dbms_output.put_line('Missing SUBMISSION_ID in PROTOCOL_SUBMISSION for PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||' and SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;
ls_content_type:=r_doc.MIME_TYPE;

if ls_content_type is null then 
ls_content_type:=r_doc.FILE_NAME;
select REVERSE(substr( REVERSE(ls_content_type),1,(instr( REVERSE(ls_content_type),'.',1)-1))) into ls_content_type from dual;
if    ls_content_type='xls' or  ls_content_type='xlsx' then
  ls_content_type:='application/excel';
elsif ls_content_type='doc' or  ls_content_type='docx' then
  ls_content_type:='application/msword';  
elsif ls_content_type='ppt' or  ls_content_type='pptx' then
  ls_content_type:='application/powerpoint';        
elsif ls_content_type='html'  then
  ls_content_type:='text/html'; 
elsif ls_content_type='pdf'  then
  ls_content_type:='application/pdf';       
elsif ls_content_type='jpg' or ls_content_type='jpeg'  then
  ls_content_type:='image/jpeg'; 
elsif ls_content_type='vsd' then
  ls_content_type:='application/vnd.visio';
elsif ls_content_type='xml' then
  ls_content_type:='application/xml'; 
elsif ls_content_type='png' then 
  ls_content_type:='image/png'; 
elsif ls_content_type='rtf' then 
  ls_content_type:='application/rtf';
else      
  ls_content_type:='other'; 
end if;

end if;
begin
SELECT SUBMISSION_STATUS_CODE INTO ls_submission_status FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER= ls_proto_num AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_doc.SUBMISSION_NUMBER;
exception
when no_data_found then
dbms_output.put_line('Missing SUBMISSION_STATUS_CODE in PROTOCOL_SUBMISSION for PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

IF ls_submission_status=105 THEN
SELECT RTRIM(ls_proto_num,'T') INTO ls_protocol_number from dual;
SELECT FN_GET_KUALI_SEQ(ls_protocol_number,li_seq_num) INTO li_seq FROM DUAL;
begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_protocol_number AND SEQUENCE_NUMBER=li_seq;
exception
when others then
dbms_output.put_line('Missing PROTOCOL_ID in PROTOCOL for SEQUENCE_NUMBER'|| li_seq||'  '||'and PROTOCOL_NUMBER '||ls_protocol_number);
end;

begin
SELECT SUBMISSION_ID INTO li_submission_id FROM PROTOCOL_SUBMISSION WHERE PROTOCOL_NUMBER=ls_protocol_number AND SEQUENCE_NUMBER=li_seq AND SUBMISSION_NUMBER=r_doc.SUBMISSION_NUMBER;
INSERT INTO PROTOCOL_SUBMISSION_DOC(SUBMISSION_DOC_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,DESCRIPTION,CONTENT_TYPE)
VALUES(li_submission_doc_id,ls_proto_num,li_seq,r_doc.SUBMISSION_NUMBER,li_protocol_id,li_submission_id,r_doc.DOCUMENT_ID,r_doc.FILE_NAME,r_doc.DOCUMENT,r_doc.UPDATE_TIMESTAMP,LOWER(r_doc.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_doc.DESCRIPTION,ls_content_type);
exception
when others then
dbms_output.put_line('Missing SUBMISSION_ID in PROTOCOL_SUBMISSION for PROTOCOL_NUMBER:'||ls_protocol_number||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER);
end;


END IF;


SELECT SUBSTR(ls_proto_num,11,1) INTO ls_proto FROM DUAL;
--if ls_proto='A' or ls_proto='R'  then
if ls_proto is not null and ls_proto!='T' THEN
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_seq_num) INTO li_seq FROM DUAL;

li_flag:=1;
if ls_number is null then
select (ls_proto_num||li_seq_num) into ls_number from dual;
--ls_number:=(ls_proto_num||li_sequence);

li_flag:=0;
elsif ls_number!=(ls_proto_num||li_seq_num) then   
li_flag:=0;
select (ls_proto_num||li_seq_num) into ls_number from dual;

--ls_number:=(ls_proto_num||li_sequence);
end if;
IF  li_flag=0 THEN
--dbms_output.put_line(ls_number);
--dbms_output.put_line('PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_sequence);
PROC_AMMENDMENT_CHILD(ls_proto_num,li_seq,li_seq_num,'SUBMISSION DOC'); 
END IF;


elsif ls_proto is null  then
SELECT FN_GET_KUALI_SEQ(ls_proto_num,li_seq_num) INTO li_seq FROM DUAL;

begin
SELECT PROTOCOL_ID INTO li_protocol_id FROM PROTOCOL WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER=li_seq;
exception
when no_data_found then
dbms_output.put_line('Missing PROTOCOL_ID in PROTOCOL for PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

begin
INSERT INTO PROTOCOL_SUBMISSION_DOC(SUBMISSION_DOC_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,DESCRIPTION,CONTENT_TYPE)
VALUES(li_submission_doc_id,ls_proto_num,li_seq,r_doc.SUBMISSION_NUMBER,li_protocol_id,li_submission_id,r_doc.DOCUMENT_ID,r_doc.FILE_NAME,r_doc.DOCUMENT,r_doc.UPDATE_TIMESTAMP,LOWER(r_doc.UPDATE_USER),li_ver_nbr,SYS_GUID(),r_doc.DESCRIPTION,ls_content_type);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_SUBMISSION_DOC,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||r_doc.SEQUENCE_NUMBER||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

IF li_seq>0 THEN
li_flag:=1;
if ls_test_number is null then
select (ls_proto_num||li_seq_num) into ls_test_number from dual; 
li_flag:=0;
elsif ls_test_number!=(ls_proto_num||li_seq_num) then   
li_flag:=0;
select (ls_proto_num||li_seq_num) into ls_test_number from dual; 
end if;
IF  li_flag=0 THEN

begin
INSERT INTO PROTOCOL_SUBMISSION_DOC(SUBMISSION_DOC_ID,PROTOCOL_NUMBER,SEQUENCE_NUMBER,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID,DESCRIPTION,CONTENT_TYPE)
SELECT SEQ_PROTOCOL_ID.NEXTVAL,PROTOCOL_NUMBER,li_seq,SUBMISSION_NUMBER,PROTOCOL_ID,SUBMISSION_ID_FK,DOCUMENT_ID,FILE_NAME,DOCUMENT,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,SYS_GUID(),DESCRIPTION,CONTENT_TYPE FROM PROTOCOL_SUBMISSION_DOC WHERE PROTOCOL_NUMBER=ls_proto_num AND
SEQUENCE_NUMBER=(SELECT MAX(SEQUENCE_NUMBER) FROM PROTOCOL_SUBMISSION_DOC WHERE PROTOCOL_NUMBER=ls_proto_num AND SEQUENCE_NUMBER<li_seq);
exception
when others then
dbms_output.put_line('ERROR IN PROTOCOL_SUBMISSION_DOC,PROTOCOL_NUMBER:'||ls_proto_num||'SEQUENCE_NUMBER:'||li_seq||'SUBMISSION_NUMBER:'||r_doc.SUBMISSION_NUMBER||'-'||sqlerrm);
end;

END IF;
END IF;
end if;

END LOOP;
CLOSE c_doc;
END;
/ 