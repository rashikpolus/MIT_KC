DROP TABLE V_PROPOSAL_KEY
/
DROP TABLE TEMP_PROPOSAL_KEY
/
CREATE TABLE V_PROPOSAL_KEY 
   (PROPOSAL_NUMBER VARCHAR2(20 BYTE), 
	MIT_PROPOSAL_NUMBER VARCHAR2(8 BYTE), 
	CHANGED CHAR(1 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER(4,0), 
	SEQUENCE_NUMBER NUMBER(4,0), 
	PROPOSAL_ID NUMBER(12,0), 
	PERSON_ID VARCHAR2(9 BYTE), 
	ROLODEX_ID NUMBER(6,0), 
	PERSON_NAME VARCHAR2(90 BYTE), 
	NON_MIT_PERSON_FLAG CHAR(1 BYTE), 
	FACULTY_FLAG VARCHAR2(1 BYTE), 
	PROJECT_ROLE VARCHAR2(60 BYTE), 
	PERCENTAGE_EFFORT NUMBER(5,2), 
	UPDATE_TIMESTAMP DATE, 
	UPDATE_USER VARCHAR2(8 BYTE), 
	ACADEMIC_YEAR_EFFORT NUMBER(5,2), 
	SUMMER_YEAR_EFFORT NUMBER(5,2), 
	CALENDAR_YEAR_EFFORT NUMBER(5,2))
/
INSERT INTO V_PROPOSAL_KEY(PROPOSAL_NUMBER,MIT_PROPOSAL_NUMBER,CHANGED,KUALI_SEQUENCE_NUMBER,SEQUENCE_NUMBER,PROPOSAL_ID,PERSON_ID,ROLODEX_ID,PERSON_NAME,NON_MIT_PERSON_FLAG,FACULTY_FLAG,PROJECT_ROLE,PERCENTAGE_EFFORT,UPDATE_TIMESTAMP,UPDATE_USER,ACADEMIC_YEAR_EFFORT,SUMMER_YEAR_EFFORT,CALENDAR_YEAR_EFFORT)  
select l.MODULE_ITEM_KEY PROPOSAL_NUMBER,a.PROPOSAL_NUMBER MIT_PROPOSAL_NUMBER,l.changed,l.kuali_sequence_number,a.SEQUENCE_NUMBER,p.PROPOSAL_ID,DECODE(r.ROLODEX_ID,null,a.PERSON_ID,null) PERSON_ID,r.ROLODEX_ID,a.PERSON_NAME,a.NON_MIT_PERSON_FLAG,nvl(a.FACULTY_FLAG,'Y') FACULTY_FLAG,a.PROJECT_ROLE,a.PERCENTAGE_EFFORT,a.UPDATE_TIMESTAMP,a.UPDATE_USER,a.ACADEMIC_YEAR_EFFORT,a.SUMMER_YEAR_EFFORT,a.CALENDAR_YEAR_EFFORT 
FROM  
TEMP_SEQ_LOG l 
Left outer join OSP$PROPOSAL_KEY_PERSONS@coeus.kuali a on l.module_item_key=a.PROPOSAL_NUMBER and l.mit_sequence_number=a.SEQUENCE_NUMBER 
inner join PROPOSAL p on p.PROPOSAL_NUMBER=l.MODULE_ITEM_KEY and p.SEQUENCE_NUMBER=l.kuali_sequence_number 
inner join OSP$PROPOSAL@coeus.kuali ad on p.PROPOSAL_NUMBER=ad.PROPOSAL_NUMBER and p.SEQUENCE_NUMBER=ad.SEQUENCE_NUMBER left outer join ROLODEX r on a.PERSON_ID=to_char(r.ROLODEX_ID) 
WHERE ad.KEY_PERSON_INDICATOR not in('N1','N0');

CREATE TABLE TEMP_PROPOSAL_KEY 
   (PROPOSAL_NUMBER VARCHAR2(20 BYTE), 
	KUALI_SEQUENCE_NUMBER NUMBER, 
	SEQUENC NUMBER(4,0))
/
INSERT INTO TEMP_PROPOSAL_KEY(PROPOSAL_NUMBER,KUALI_SEQUENCE_NUMBER,SEQUENC)    
select PROPOSAL_NUMBER,(select max(aw.sequence_number) from V_PROPOSAL_KEY aw where aw.proposal_number= v.proposal_number
and aw.KUALI_SEQUENCE_NUMBER<=v.KUALI_SEQUENCE_NUMBER and aw.mit_proposal_number is not null)  as kuali_sequence_number,v.KUALI_SEQUENCE_NUMBER SEQUENC  
from V_PROPOSAL_KEY v  where v.mit_proposal_number is null;

CREATE INDEX TEMP_PROPOSAL_KEY_I1 ON TEMP_PROPOSAL_KEY(PROPOSAL_NUMBER,KUALI_SEQUENCE_NUMBER);
commit;

INSERT INTO PROPOSAL_PERSONS(PROPOSAL_PERSON_ID,PROPOSAL_ID,PROPOSAL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,ROLODEX_ID,FULL_NAME,CONTACT_ROLE_CODE,KEY_PERSON_PROJECT_ROLE,ACADEMIC_YEAR_EFFORT,CALENDAR_YEAR_EFFORT,SUMMER_EFFORT,TOTAL_EFFORT,FACULTY_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
select SEQ_PROPOSAL_PROPOSAL_ID.NEXTVAL,i.PROPOSAL_ID,i.PROPOSAL_NUMBER,i.kuali_sequence_number,i.PERSON_ID,i.ROLODEX_ID,i.PERSON_NAME,'KP',i.PROJECT_ROLE,i.ACADEMIC_YEAR_EFFORT,i.CALENDAR_YEAR_EFFORT,i.SUMMER_YEAR_EFFORT,i.PERCENTAGE_EFFORT,i.FACULTY_FLAG,i.UPDATE_TIMESTAMP,i.UPDATE_USER,1,sys_guid()
FROM 
V_PROPOSAL_KEY i where i.mit_proposal_number IS NOT NULL;

commit
/

INSERT INTO PROPOSAL_PERSONS(PROPOSAL_PERSON_ID,PROPOSAL_ID,PROPOSAL_NUMBER,SEQUENCE_NUMBER,PERSON_ID,ROLODEX_ID,FULL_NAME,CONTACT_ROLE_CODE,KEY_PERSON_PROJECT_ROLE,ACADEMIC_YEAR_EFFORT,CALENDAR_YEAR_EFFORT,SUMMER_EFFORT,TOTAL_EFFORT,FACULTY_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
select SEQ_PROPOSAL_PROPOSAL_ID.NEXTVAL,i.PROPOSAL_ID,i.PROPOSAL_NUMBER,v2.SEQUENC,i.PERSON_ID,i.ROLODEX_ID,i.PERSON_NAME,'KP',i.PROJECT_ROLE,i.ACADEMIC_YEAR_EFFORT,i.CALENDAR_YEAR_EFFORT,i.SUMMER_YEAR_EFFORT,i.PERCENTAGE_EFFORT,i.FACULTY_FLAG,i.UPDATE_TIMESTAMP,i.UPDATE_USER,1,sys_guid()
FROM 
V_PROPOSAL_KEY i inner join 
TEMP_PROPOSAL_KEY v2 on i.PROPOSAL_NUMBER=v2.PROPOSAL_NUMBER and i.sequence_number=v2.kuali_sequence_number;
commit;
--where i.changed='N';

update PROPOSAL_PERSONS pp set pp.proposal_id = (select p.proposal_id from proposal p where
p.proposal_number = pp.proposal_number
and p.sequence_number = pp.sequence_number
);
commit
/
DECLARE
li_ver_nbr NUMBER(8):=1;
li_prop_pers_unit_id NUMBER(22);
li_prop_pers_id NUMBER(22);
ls_person_id VARCHAR2(40);
li_indicator_count NUMBER;

li_mit_seq_num NUMBER(4,0);
li_kua_seq_num NUMBER(4,0);
li_count number;
CURSOR c_kp_unit_main IS
SELECT PROPOSAL_NUMBER,SEQUENCE_NUMBER FROM PROPOSAL ORDER BY PROPOSAL_NUMBER,SEQUENCE_NUMBER;
r_kp_unit_main c_kp_unit_main%ROWTYPE;

CURSOR c_pers_units(as_mit varchar2,as_seq number) IS
SELECT PROPOSAL_NUMBER,as_seq SEQUENCE_NUMBER,PERSON_ID,UNIT_NUMBER,'N' LEAD_UNIT_FLAG ,UPDATE_TIMESTAMP,UPDATE_USER,2 INV_FLAG FROM OSP$PROPOSAL_KEY_PERSONS_UNITS@coeus.kuali
where PROPOSAL_NUMBER=as_mit and SEQUENCE_NUMBER =(
select max(aw.sequence_number) from OSP$PROPOSAL_KEY_PERSONS_UNITS@coeus.kuali aw where aw.PROPOSAL_NUMBER=OSP$PROPOSAL_KEY_PERSONS_UNITS.PROPOSAL_NUMBER 
and aw.sequence_number<=as_seq); 
r_pers_units c_pers_units%ROWTYPE;

BEGIN

IF c_kp_unit_main%ISOPEN THEN
CLOSE c_kp_unit_main;
END IF;
OPEN c_kp_unit_main;
LOOP
FETCH c_kp_unit_main INTO r_kp_unit_main;
EXIT WHEN c_kp_unit_main%NOTFOUND;

li_mit_seq_num:=r_kp_unit_main.SEQUENCE_NUMBER;

select COUNT(proposal_number) into li_indicator_count from osp$proposal@coeus.kuali where PROPOSAL_NUMBER=r_kp_unit_main.PROPOSAL_NUMBER and sequence_number = li_mit_seq_num and KEY_PERSON_INDICATOR IN ('P0','P1');

if li_indicator_count > 0 then

IF c_pers_units%ISOPEN THEN
CLOSE c_pers_units;
END IF;
OPEN c_pers_units(r_kp_unit_main.PROPOSAL_NUMBER,li_mit_seq_num);
LOOP
FETCH c_pers_units INTO r_pers_units;
EXIT WHEN c_pers_units%NOTFOUND;

SELECT SEQ_PROPOSAL_PROPOSAL_ID.NEXTVAL INTO li_prop_pers_unit_id FROM DUAL;
--select FN_GET_KUALI_SEQ(r_pers_units.PROPOSAL_NUMBER,r_pers_units.SEQUENCE_NUMBER) into li_kua_seq_num from dual;
ls_person_id:=r_pers_units.PERSON_ID;     

BEGIN
IF   r_pers_units.INV_FLAG=1 THEN         
SELECT PROPOSAL_PERSON_ID INTO li_prop_pers_id FROM PROPOSAL_PERSONS WHERE PROPOSAL_NUMBER=r_pers_units.PROPOSAL_NUMBER AND
SEQUENCE_NUMBER=r_kp_unit_main.SEQUENCE_NUMBER AND(PERSON_ID=to_char(r_pers_units.PERSON_ID) OR ROLODEX_ID=to_number(r_pers_units.PERSON_ID)) AND contact_role_code IN ('PI','COI');

ELSE
SELECT PROPOSAL_PERSON_ID INTO li_prop_pers_id FROM PROPOSAL_PERSONS WHERE PROPOSAL_NUMBER=r_pers_units.PROPOSAL_NUMBER AND
SEQUENCE_NUMBER=r_kp_unit_main.SEQUENCE_NUMBER AND(PERSON_ID=to_char(r_pers_units.PERSON_ID) OR ROLODEX_ID=to_number(r_pers_units.PERSON_ID))  AND contact_role_code IN ('KP');

END IF;

select count(PROPOSAL_PERSON_UNIT_ID) into li_count from PROPOSAL_PERSON_UNITS where PROPOSAL_PERSON_ID=li_prop_pers_id and UNIT_NUMBER=r_pers_units.UNIT_NUMBER AND LEAD_UNIT_FLAG='N';

if li_count=0 then

INSERT INTO PROPOSAL_PERSON_UNITS(PROPOSAL_PERSON_UNIT_ID,PROPOSAL_PERSON_ID,UNIT_NUMBER,LEAD_UNIT_FLAG,UPDATE_TIMESTAMP,UPDATE_USER,VER_NBR,OBJ_ID)
VALUES(li_prop_pers_unit_id,li_prop_pers_id,r_pers_units.UNIT_NUMBER,r_pers_units.LEAD_UNIT_FLAG,r_pers_units.UPDATE_TIMESTAMP,r_pers_units.UPDATE_USER,li_ver_nbr,SYS_GUID());

end if;

EXCEPTION
WHEN OTHERS THEN 
dbms_output.put_line('ERROR IN PROPOSAL_PERSON_UNITS,PROPOSAL_NUMBER: '||r_pers_units.PROPOSAL_NUMBER||'- SEQUENCE_NUMBER= '||r_pers_units.SEQUENCE_NUMBER||',  '||r_pers_units.PERSON_ID||' ,  '||r_pers_units.INV_FLAG||sqlerrm);
END;

END LOOP;
CLOSE c_pers_units;
end if;

END LOOP;
CLOSE c_kp_unit_main;
dbms_output.put_line('Completed PROPOSAL_PERSON_UNITS(for KeyPerson)!!!');
END;
/
